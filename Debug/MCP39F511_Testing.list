
MCP39F511_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800515c  0800515c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005164  08005164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000008c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103c7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002612  00000000  00000000  00030467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b60  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002de1  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fdde  00000000  00000000  00037029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad1e  00000000  00000000  00046e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121b25  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003668  00000000  00000000  00121b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050e8 	.word	0x080050e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080050e8 	.word	0x080050e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_DMA_Init+0x4c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_DMA_Init+0x4c>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_DMA_Init+0x4c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200d      	movs	r0, #13
 80005bc:	f000 feb9 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005c0:	200d      	movs	r0, #13
 80005c2:	f000 fed2 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 feb1 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005d0:	200f      	movs	r0, #15
 80005d2:	f000 feca 	bl	800136a <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x84>)
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <MX_ETH_Init+0x88>)
 80005ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_ETH_Init+0x8c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ETH_Init+0x8c>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ETH_Init+0x8c>)
 80005fc:	22e1      	movs	r2, #225	; 0xe1
 80005fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ETH_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ETH_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_ETH_Init+0x8c>)
 800060e:	2200      	movs	r2, #0
 8000610:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x84>)
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_ETH_Init+0x8c>)
 8000616:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_ETH_Init+0x84>)
 800061a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800061e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x84>)
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_ETH_Init+0x90>)
 8000624:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_ETH_Init+0x84>)
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <MX_ETH_Init+0x94>)
 800062a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x84>)
 800062e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000632:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x84>)
 8000636:	f001 fab5 	bl	8001ba4 <HAL_ETH_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 fa34 	bl	8000aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000644:	2238      	movs	r2, #56	; 0x38
 8000646:	2100      	movs	r1, #0
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_ETH_Init+0x98>)
 800064a:	f004 f8d7 	bl	80047fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_ETH_Init+0x98>)
 8000650:	2221      	movs	r2, #33	; 0x21
 8000652:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_ETH_Init+0x98>)
 8000656:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800065a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_ETH_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000204 	.word	0x20000204
 800066c:	40028000 	.word	0x40028000
 8000670:	200002b4 	.word	0x200002b4
 8000674:	2000012c 	.word	0x2000012c
 8000678:	2000008c 	.word	0x2000008c
 800067c:	200001cc 	.word	0x200001cc

08000680 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a55      	ldr	r2, [pc, #340]	; (80007f4 <HAL_ETH_MspInit+0x174>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	f040 80a4 	bne.w	80007ec <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a52      	ldr	r2, [pc, #328]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
 80006b4:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006bc:	623b      	str	r3, [r7, #32]
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a4b      	ldr	r2, [pc, #300]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a44      	ldr	r2, [pc, #272]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a3d      	ldr	r2, [pc, #244]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a36      	ldr	r2, [pc, #216]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 8000756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <HAL_ETH_MspInit+0x178>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000768:	2332      	movs	r3, #50	; 0x32
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000778:	230b      	movs	r3, #11
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	481e      	ldr	r0, [pc, #120]	; (80007fc <HAL_ETH_MspInit+0x17c>)
 8000784:	f001 fd36 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000788:	2386      	movs	r3, #134	; 0x86
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	4619      	mov	r1, r3
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <HAL_ETH_MspInit+0x180>)
 80007a4:	f001 fd26 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ba:	230b      	movs	r3, #11
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	480f      	ldr	r0, [pc, #60]	; (8000804 <HAL_ETH_MspInit+0x184>)
 80007c6:	f001 fd15 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007dc:	230b      	movs	r3, #11
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <HAL_ETH_MspInit+0x188>)
 80007e8:	f001 fd04 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3738      	adds	r7, #56	; 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40028000 	.word	0x40028000
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a4b      	ldr	r2, [pc, #300]	; (8000958 <MX_GPIO_Init+0x14c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a44      	ldr	r2, [pc, #272]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a36      	ldr	r2, [pc, #216]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a28      	ldr	r2, [pc, #160]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d0:	4822      	ldr	r0, [pc, #136]	; (800095c <MX_GPIO_Init+0x150>)
 80008d2:	f001 fe3b 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_GPIO_Init+0x154>)
 80008dc:	f001 fe36 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481b      	ldr	r0, [pc, #108]	; (8000964 <MX_GPIO_Init+0x158>)
 80008f8:	f001 fc7c 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_GPIO_Init+0x150>)
 8000916:	f001 fc6d 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_GPIO_Init+0x154>)
 8000932:	f001 fc5f 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x154>)
 800094a:	f001 fc53 	bl	80021f4 <HAL_GPIO_Init>

}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	; 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020800 	.word	0x40020800

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fb70 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f826 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff ff4a 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f7ff fe0c 	bl	8000594 <MX_DMA_Init>
  MX_ETH_Init();
 800097c:	f7ff fe32 	bl	80005e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000980:	f000 f97c 	bl	8000c7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000984:	f000 fab2 	bl	8000eec <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000988:	f000 f94e 	bl	8000c28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  Length = sprintf((char*)Message, "Siema");
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <main+0x48>)
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <main+0x4c>)
 8000990:	f003 ff3c 	bl	800480c <siprintf>
 8000994:	4603      	mov	r3, r0
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <main+0x50>)
 800099a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&huart4, Message, Length);
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <main+0x50>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	4903      	ldr	r1, [pc, #12]	; (80009b4 <main+0x4c>)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <main+0x54>)
 80009a8:	f002 fbec 	bl	8003184 <HAL_UART_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <main+0x44>
 80009ae:	bf00      	nop
 80009b0:	08005100 	.word	0x08005100
 80009b4:	200002bc 	.word	0x200002bc
 80009b8:	200002ba 	.word	0x200002ba
 80009bc:	200002d0 	.word	0x200002d0

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ff14 	bl	80047fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a34:	23a8      	movs	r3, #168	; 0xa8
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 feb7 	bl	80027b8 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f82c 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2105      	movs	r1, #5
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 f918 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f815 	bl	8000aac <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]

}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 face 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA1_Stream2_IRQHandler+0x10>)
 8000b62:	f000 fdb5 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200003b8 	.word	0x200003b8

08000b70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <DMA1_Stream4_IRQHandler+0x10>)
 8000b76:	f000 fdab 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000358 	.word	0x20000358

08000b84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <UART4_IRQHandler+0x10>)
 8000b8a:	f002 fb79 	bl	8003280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200002d0 	.word	0x200002d0

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f003 fdee 	bl	80047a8 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20030000 	.word	0x20030000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200002cc 	.word	0x200002cc
 8000c00:	20000938 	.word	0x20000938

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_tx;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_UART4_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_UART4_Init+0x4c>)
 8000c60:	f002 fa42 	bl	80030e8 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f7ff ff1f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002d0 	.word	0x200002d0
 8000c78:	40004c00 	.word	0x40004c00

08000c7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART3_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	f002 fa18 	bl	80030e8 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f7ff fef5 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000314 	.word	0x20000314
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a75      	ldr	r2, [pc, #468]	; (8000ec4 <HAL_UART_MspInit+0x1f4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 80b1 	bne.w	8000e56 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	4b73      	ldr	r3, [pc, #460]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a72      	ldr	r2, [pc, #456]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	4b6c      	ldr	r3, [pc, #432]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a6b      	ldr	r2, [pc, #428]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b69      	ldr	r3, [pc, #420]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a64      	ldr	r2, [pc, #400]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	485a      	ldr	r0, [pc, #360]	; (8000ecc <HAL_UART_MspInit+0x1fc>)
 8000d64:	f001 fa46 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4852      	ldr	r0, [pc, #328]	; (8000ed0 <HAL_UART_MspInit+0x200>)
 8000d86:	f001 fa35 	bl	80021f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d8a:	4b52      	ldr	r3, [pc, #328]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <HAL_UART_MspInit+0x208>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d90:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d98:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000db8:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000dca:	4842      	ldr	r0, [pc, #264]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dcc:	f000 fae8 	bl	80013a0 <HAL_DMA_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000dd6:	f7ff fe69 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a3d      	ldr	r2, [pc, #244]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	4a3c      	ldr	r2, [pc, #240]	; (8000ed4 <HAL_UART_MspInit+0x204>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000de8:	4a3d      	ldr	r2, [pc, #244]	; (8000ee0 <HAL_UART_MspInit+0x210>)
 8000dea:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b39      	ldr	r3, [pc, #228]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b36      	ldr	r3, [pc, #216]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e06:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e28:	482c      	ldr	r0, [pc, #176]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e2a:	f000 fab9 	bl	80013a0 <HAL_DMA_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8000e34:	f7ff fe3a 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3e:	4a27      	ldr	r2, [pc, #156]	; (8000edc <HAL_UART_MspInit+0x20c>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2034      	movs	r0, #52	; 0x34
 8000e4a:	f000 fa72 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e4e:	2034      	movs	r0, #52	; 0x34
 8000e50:	f000 fa8b 	bl	800136a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e54:	e031      	b.n	8000eba <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_UART_MspInit+0x214>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d12c      	bne.n	8000eba <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0x1f8>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <HAL_UART_MspInit+0x218>)
 8000eb6:	f001 f99d 	bl	80021f4 <HAL_GPIO_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004c00 	.word	0x40004c00
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	20000358 	.word	0x20000358
 8000ed8:	40026070 	.word	0x40026070
 8000edc:	200003b8 	.word	0x200003b8
 8000ee0:	40026040 	.word	0x40026040
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ef6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f30:	f001 fb25 	bl	800257e <HAL_PCD_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f7ff fdb7 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000418 	.word	0x20000418

08000f48 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f68:	d13f      	bne.n	8000fea <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <HAL_PCD_MspInit+0xb0>)
 8000fa4:	f001 f926 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <HAL_PCD_MspInit+0xb0>)
 8000fbe:	f001 f919 	bl	80021f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6353      	str	r3, [r2, #52]	; 0x34
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_PCD_MspInit+0xac>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff fded 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 fbc3 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fc9b 	bl	8000968 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001034:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001040:	0800516c 	.word	0x0800516c
  ldr r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001048:	20000938 	.word	0x20000938

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fd18 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000924 	.word	0x20000924

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000924 	.word	0x20000924

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff feb6 	bl	800111c <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e099      	b.n	80014f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	e00f      	b.n	80013fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013de:	f7ff fe9d 	bl	800111c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d908      	bls.n	80013fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e078      	b.n	80014f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e8      	bne.n	80013de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_DMA_Init+0x158>)
 8001418:	4013      	ands	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2b04      	cmp	r3, #4
 8001456:	d107      	bne.n	8001468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4313      	orrs	r3, r2
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f023 0307 	bic.w	r3, r3, #7
 800147e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	2b04      	cmp	r3, #4
 8001490:	d117      	bne.n	80014c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fb01 	bl	8001aac <DMA_CheckFifoParam>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014be:	2301      	movs	r3, #1
 80014c0:	e016      	b.n	80014f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fab8 	bl	8001a40 <DMA_CalcBaseAndBitshift>
 80014d0:	4603      	mov	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	223f      	movs	r2, #63	; 0x3f
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	f010803f 	.word	0xf010803f

080014fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_DMA_Start_IT+0x26>
 800151e:	2302      	movs	r3, #2
 8001520:	e040      	b.n	80015a4 <HAL_DMA_Start_IT+0xa8>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d12f      	bne.n	8001596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fa4a 	bl	80019e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0216 	orr.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0208 	orr.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e005      	b.n	80015a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800159e:	2302      	movs	r3, #2
 80015a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ba:	f7ff fdaf 	bl	800111c <HAL_GetTick>
 80015be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e052      	b.n	8001684 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0216 	bic.w	r2, r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_DMA_Abort+0x62>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0208 	bic.w	r2, r2, #8
 800161c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162e:	e013      	b.n	8001658 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001630:	f7ff fd74 	bl	800111c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b05      	cmp	r3, #5
 800163c:	d90c      	bls.n	8001658 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e015      	b.n	8001684 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e4      	bne.n	8001630 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	223f      	movs	r2, #63	; 0x3f
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d004      	beq.n	80016aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00c      	b.n	80016c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016dc:	4b8e      	ldr	r3, [pc, #568]	; (8001918 <HAL_DMA_IRQHandler+0x248>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a8e      	ldr	r2, [pc, #568]	; (800191c <HAL_DMA_IRQHandler+0x24c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2208      	movs	r2, #8
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01a      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2208      	movs	r2, #8
 800172a:	409a      	lsls	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f043 0202 	orr.w	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	2204      	movs	r2, #4
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2204      	movs	r2, #4
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f043 0204 	orr.w	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2210      	movs	r2, #16
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d043      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03c      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2210      	movs	r2, #16
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d018      	beq.n	8001812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
 80017fe:	e01f      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01b      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e016      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0208 	bic.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2220      	movs	r2, #32
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 808f 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8087 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2220      	movs	r2, #32
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d136      	bne.n	80018e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0216 	bic.w	r2, r2, #22
 8001888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <HAL_DMA_IRQHandler+0x1da>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0208 	bic.w	r2, r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	223f      	movs	r2, #63	; 0x3f
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d07e      	beq.n	80019dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
        }
        return;
 80018e6:	e079      	b.n	80019dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	2b00      	cmp	r3, #0
 800190a:	d031      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e02c      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e01e      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0210 	bic.w	r2, r2, #16
 800194e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	2b00      	cmp	r3, #0
 8001976:	d032      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d022      	beq.n	80019ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2205      	movs	r2, #5
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d307      	bcc.n	80019b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f2      	bne.n	800199c <HAL_DMA_IRQHandler+0x2cc>
 80019b6:	e000      	b.n	80019ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	e000      	b.n	80019de <HAL_DMA_IRQHandler+0x30e>
        return;
 80019dc:	bf00      	nop
    }
  }
}
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d108      	bne.n	8001a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a22:	e007      	b.n	8001a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3b10      	subs	r3, #16
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d909      	bls.n	8001a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	1d1a      	adds	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a80:	e007      	b.n	8001a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	08005120 	.word	0x08005120

08001aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11f      	bne.n	8001b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d856      	bhi.n	8001b7a <DMA_CheckFifoParam+0xce>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <DMA_CheckFifoParam+0x28>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af7 	.word	0x08001af7
 8001adc:	08001ae5 	.word	0x08001ae5
 8001ae0:	08001b7b 	.word	0x08001b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d046      	beq.n	8001b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e043      	b.n	8001b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afe:	d140      	bne.n	8001b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e03d      	b.n	8001b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0e:	d121      	bne.n	8001b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d837      	bhi.n	8001b86 <DMA_CheckFifoParam+0xda>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <DMA_CheckFifoParam+0x70>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b33 	.word	0x08001b33
 8001b24:	08001b2d 	.word	0x08001b2d
 8001b28:	08001b45 	.word	0x08001b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b30:	e030      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d025      	beq.n	8001b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b42:	e022      	b.n	8001b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b52:	e01c      	b.n	8001b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d903      	bls.n	8001b62 <DMA_CheckFifoParam+0xb6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b60:	e018      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      break;
 8001b66:	e015      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      break;
 8001b78:	e00b      	b.n	8001b92 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e00a      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e008      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e006      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e004      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
    }
  } 
  
  return status; 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06c      	b.n	8001c90 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d106      	bne.n	8001bce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2223      	movs	r2, #35	; 0x23
 8001bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe fd59 	bl	8000680 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_ETH_Init+0xf4>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <HAL_ETH_Init+0xf4>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_ETH_Init+0xf4>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_ETH_Init+0xf8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a2b      	ldr	r2, [pc, #172]	; (8001c9c <HAL_ETH_Init+0xf8>)
 8001bf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_ETH_Init+0xf8>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_ETH_Init+0xf8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_ETH_Init+0xf8>)
 8001c06:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c20:	f7ff fa7c 	bl	800111c <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c26:	e011      	b.n	8001c4c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c28:	f7ff fa78 	bl	800111c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c36:	d909      	bls.n	8001c4c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	22e0      	movs	r2, #224	; 0xe0
 8001c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e021      	b.n	8001c90 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e4      	bne.n	8001c28 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f958 	bl	8001f14 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f9ff 	bl	8002068 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa55 	bl	800211a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	461a      	mov	r2, r3
 8001c76:	2100      	movs	r1, #0
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f9bd 	bl	8001ff8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800

08001ca0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <ETH_SetMACConfig+0x15c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7c1b      	ldrb	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <ETH_SetMACConfig+0x28>
 8001cc2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cc6:	e000      	b.n	8001cca <ETH_SetMACConfig+0x2a>
 8001cc8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <ETH_SetMACConfig+0x38>
 8001cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cd6:	e000      	b.n	8001cda <ETH_SetMACConfig+0x3a>
 8001cd8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7fdb      	ldrb	r3, [r3, #31]
 8001ce6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ce8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	7f92      	ldrb	r2, [r2, #30]
 8001cf4:	2a00      	cmp	r2, #0
 8001cf6:	d102      	bne.n	8001cfe <ETH_SetMACConfig+0x5e>
 8001cf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfc:	e000      	b.n	8001d00 <ETH_SetMACConfig+0x60>
 8001cfe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	7f1b      	ldrb	r3, [r3, #28]
 8001d06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d102      	bne.n	8001d28 <ETH_SetMACConfig+0x88>
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	e000      	b.n	8001d2a <ETH_SetMACConfig+0x8a>
 8001d28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	7bdb      	ldrb	r3, [r3, #15]
 8001d30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff f9ea 	bl	8001134 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d101      	bne.n	8001d8e <ETH_SetMACConfig+0xee>
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	e000      	b.n	8001d90 <ETH_SetMACConfig+0xf0>
 8001d8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d90:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d101      	bne.n	8001da6 <ETH_SetMACConfig+0x106>
 8001da2:	2208      	movs	r2, #8
 8001da4:	e000      	b.n	8001da8 <ETH_SetMACConfig+0x108>
 8001da6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001da8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001db0:	2a01      	cmp	r2, #1
 8001db2:	d101      	bne.n	8001db8 <ETH_SetMACConfig+0x118>
 8001db4:	2204      	movs	r2, #4
 8001db6:	e000      	b.n	8001dba <ETH_SetMACConfig+0x11a>
 8001db8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001dc2:	2a01      	cmp	r2, #1
 8001dc4:	d101      	bne.n	8001dca <ETH_SetMACConfig+0x12a>
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	e000      	b.n	8001dcc <ETH_SetMACConfig+0x12c>
 8001dca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff f9a5 	bl	8001134 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	ff20810f 	.word	0xff20810f

08001e00 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <ETH_SetDMAConfig+0x110>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	7b1b      	ldrb	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <ETH_SetDMAConfig+0x2c>
 8001e26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e2a:	e000      	b.n	8001e2e <ETH_SetDMAConfig+0x2e>
 8001e2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	7b5b      	ldrb	r3, [r3, #13]
 8001e32:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e34:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	7f52      	ldrb	r2, [r2, #29]
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d102      	bne.n	8001e44 <ETH_SetDMAConfig+0x44>
 8001e3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e42:	e000      	b.n	8001e46 <ETH_SetDMAConfig+0x46>
 8001e44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	7b9b      	ldrb	r3, [r3, #14]
 8001e4c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e4e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7f1b      	ldrb	r3, [r3, #28]
 8001e5a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e5c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7f9b      	ldrb	r3, [r3, #30]
 8001e62:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e64:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e72:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff f94c 	bl	8001134 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eb4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001eba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ec0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ec8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001eca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ed2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ed8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ee6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff f91d 	bl	8001134 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	f8de3f23 	.word	0xf8de3f23

08001f14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0a6      	sub	sp, #152	; 0x98
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f50:	2300      	movs	r3, #0
 8001f52:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fe86 	bl	8001ca0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ff08 	bl	8001e00 <ETH_SetDMAConfig>
}
 8001ff0:	bf00      	nop
 8001ff2:	3798      	adds	r7, #152	; 0x98
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3305      	adds	r3, #5
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	3204      	adds	r2, #4
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <ETH_MACAddressConfig+0x68>)
 800201a:	4413      	add	r3, r2
 800201c:	461a      	mov	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3303      	adds	r3, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4313      	orrs	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <ETH_MACAddressConfig+0x6c>)
 800204a:	4413      	add	r3, r2
 800204c:	461a      	mov	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6013      	str	r3, [r2, #0]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40028040 	.word	0x40028040
 8002064:	40028044 	.word	0x40028044

08002068 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e03e      	b.n	80020f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68d9      	ldr	r1, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	3206      	adds	r2, #6
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d80c      	bhi.n	80020d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68d9      	ldr	r1, [r3, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	e004      	b.n	80020e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3301      	adds	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d9bd      	bls.n	8002076 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	611a      	str	r2, [r3, #16]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e046      	b.n	80021b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6919      	ldr	r1, [r3, #16]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002164:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800216c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	3212      	adds	r2, #18
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d80c      	bhi.n	80021a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	e004      	b.n	80021b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d9b5      	bls.n	8002128 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e177      	b.n	8002500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8166 	bne.w	80024fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80c0 	beq.w	80024fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_GPIO_Init+0x324>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_GPIO_Init+0x324>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_GPIO_Init+0x324>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a61      	ldr	r2, [pc, #388]	; (800251c <HAL_GPIO_Init+0x328>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_GPIO_Init+0x32c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d037      	beq.n	8002432 <HAL_GPIO_Init+0x23e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_GPIO_Init+0x330>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_GPIO_Init+0x23a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a56      	ldr	r2, [pc, #344]	; (8002528 <HAL_GPIO_Init+0x334>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02b      	beq.n	800242a <HAL_GPIO_Init+0x236>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_GPIO_Init+0x338>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x232>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x33c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x340>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x22a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x344>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x348>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x34c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x350>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x21a>
 800240a:	2309      	movs	r3, #9
 800240c:	e012      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800240e:	230a      	movs	r3, #10
 8002410:	e010      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002412:	2308      	movs	r3, #8
 8002414:	e00e      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002416:	2307      	movs	r3, #7
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800241a:	2306      	movs	r3, #6
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x328>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_GPIO_Init+0x354>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_GPIO_Init+0x354>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_GPIO_Init+0x354>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae84 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40021c00 	.word	0x40021c00
 8002540:	40022000 	.word	0x40022000
 8002544:	40022400 	.word	0x40022400
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002568:	e003      	b.n	8002572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	041a      	lsls	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	619a      	str	r2, [r3, #24]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800257e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002580:	b08f      	sub	sp, #60	; 0x3c
 8002582:	af0a      	add	r7, sp, #40	; 0x28
 8002584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e10f      	b.n	80027b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fccc 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2203      	movs	r2, #3
 80025b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fe49 	bl	8004266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	687e      	ldr	r6, [r7, #4]
 80025dc:	466d      	mov	r5, sp
 80025de:	f106 0410 	add.w	r4, r6, #16
 80025e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f2:	1d33      	adds	r3, r6, #4
 80025f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	f001 fdd4 	bl	80041a4 <USB_CoreInit>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0d0      	b.n	80027b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f001 fe37 	bl	8004288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e04a      	b.n	80026b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333d      	adds	r3, #61	; 0x3d
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	333c      	adds	r3, #60	; 0x3c
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	b298      	uxth	r0, r3
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3344      	adds	r3, #68	; 0x44
 800265c:	4602      	mov	r2, r0
 800265e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3340      	adds	r3, #64	; 0x40
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3348      	adds	r3, #72	; 0x48
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	; 0x4c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3354      	adds	r3, #84	; 0x54
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d3af      	bcc.n	8002620 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e044      	b.n	8002750 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d3b5      	bcc.n	80026c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	687e      	ldr	r6, [r7, #4]
 8002762:	466d      	mov	r5, sp
 8002764:	f106 0410 	add.w	r4, r6, #16
 8002768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002774:	e885 0003 	stmia.w	r5, {r0, r1}
 8002778:	1d33      	adds	r3, r6, #4
 800277a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f001 fdcf 	bl	8004320 <USB_DevInit>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e00d      	b.n	80027b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 ff9a 	bl	80046e2 <USB_DevDisconnect>

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e267      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b82      	ldr	r3, [pc, #520]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e242      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fc54 	bl	800111c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fc50 	bl	800111c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e207      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fc40 	bl	800111c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fc3c 	bl	800111c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1f3      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c7      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fbf5 	bl	800111c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fbf1 	bl	800111c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a8      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4925      	ldr	r1, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fbd4 	bl	800111c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe fbd0 	bl	800111c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e187      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fbb4 	bl	800111c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe fbb0 	bl	800111c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e167      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fb9d 	bl	800111c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	e00e      	b.n	8002a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fb99 	bl	800111c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d907      	bls.n	8002a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e150      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ea      	bne.n	80029e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b77      	ldr	r3, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fb59 	bl	800111c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fb55 	bl	800111c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a94:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a63      	ldr	r2, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a5e      	ldr	r2, [pc, #376]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002ac4:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fb1a 	bl	800111c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fb16 	bl	800111c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0cb      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fb04 	bl	800111c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fb00 	bl	800111c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b5      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d05c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d141      	bne.n	8002bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fad4 	bl	800111c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fad0 	bl	800111c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e087      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe faa9 	bl	800111c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe faa5 	bl	800111c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e05c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x416>
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa92 	bl	800111c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fa8e 	bl	800111c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e045      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e038      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe f9c0 	bl	800111c <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe f9bc 	bl	800111c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f920 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08005108 	.word	0x08005108
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b094      	sub	sp, #80	; 0x50
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e80:	2300      	movs	r3, #0
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	f200 80e1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea6:	e0db      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eac:	e0db      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e0d8      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d063      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4621      	mov	r1, r4
 8002f00:	1a51      	subs	r1, r2, r1
 8002f02:	6139      	str	r1, [r7, #16]
 8002f04:	4629      	mov	r1, r5
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	018b      	lsls	r3, r1, #6
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f22:	4651      	mov	r1, sl
 8002f24:	018a      	lsls	r2, r1, #6
 8002f26:	4651      	mov	r1, sl
 8002f28:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f46:	4690      	mov	r8, r2
 8002f48:	4699      	mov	r9, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	eb18 0303 	adds.w	r3, r8, r3
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	462b      	mov	r3, r5
 8002f54:	eb49 0303 	adc.w	r3, r9, r3
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f66:	4629      	mov	r1, r5
 8002f68:	024b      	lsls	r3, r1, #9
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f70:	4621      	mov	r1, r4
 8002f72:	024a      	lsls	r2, r1, #9
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f84:	f7fd f984 	bl	8000290 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f90:	e058      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbe:	0150      	lsls	r0, r2, #5
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	00eb      	lsls	r3, r5, #3
 8002ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffa:	00e2      	lsls	r2, r4, #3
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	461d      	mov	r5, r3
 8003000:	4643      	mov	r3, r8
 8003002:	18e3      	adds	r3, r4, r3
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	464b      	mov	r3, r9
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301a:	4629      	mov	r1, r5
 800301c:	028b      	lsls	r3, r1, #10
 800301e:	4621      	mov	r1, r4
 8003020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003024:	4621      	mov	r1, r4
 8003026:	028a      	lsls	r2, r1, #10
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302e:	2200      	movs	r2, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	61fa      	str	r2, [r7, #28]
 8003034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003038:	f7fd f92a 	bl	8000290 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003068:	4618      	mov	r0, r3
 800306a:	3750      	adds	r7, #80	; 0x50
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08005118 	.word	0x08005118

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08005118 	.word	0x08005118

080030e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03f      	b.n	800317a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fdde 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fdc5 	bl	8003cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	; 0x30
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	d165      	bne.n	800326a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_Transmit_DMA+0x26>
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e05e      	b.n	800326c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_UART_Transmit_DMA+0x38>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e057      	b.n	800326c <HAL_UART_Transmit_DMA+0xe8>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2221      	movs	r2, #33	; 0x21
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_UART_Transmit_DMA+0xf0>)
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <HAL_UART_Transmit_DMA+0xf4>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_UART_Transmit_DMA+0xf8>)
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	2200      	movs	r2, #0
 8003202:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3304      	adds	r3, #4
 8003218:	461a      	mov	r2, r3
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	f7fe f96e 	bl	80014fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	617b      	str	r3, [r7, #20]
   return(result);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003252:	627a      	str	r2, [r7, #36]	; 0x24
 8003254:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3730      	adds	r7, #48	; 0x30
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	080037ed 	.word	0x080037ed
 8003278:	08003887 	.word	0x08003887
 800327c:	080038a3 	.word	0x080038a3

08003280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b0ba      	sub	sp, #232	; 0xe8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_UART_IRQHandler+0x66>
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fc30 	bl	8003b44 <UART_Receive_IT>
      return;
 80032e4:	e256      	b.n	8003794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80de 	beq.w	80034ac <HAL_UART_IRQHandler+0x22c>
 80032f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80d1 	beq.w	80034ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_UART_IRQHandler+0xae>
 8003316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_UART_IRQHandler+0xd2>
 800333a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_UART_IRQHandler+0xf6>
 800335e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0204 	orr.w	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_UART_IRQHandler+0x126>
 8003382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800338e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0208 	orr.w	r2, r3, #8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 81ed 	beq.w	800378a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_UART_IRQHandler+0x14e>
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbbb 	bl	8003b44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_UART_IRQHandler+0x17a>
 80033f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d04f      	beq.n	800349a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fac3 	bl	8003986 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d141      	bne.n	8003492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800343a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800343e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1d9      	bne.n	800340e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	2b00      	cmp	r3, #0
 8003460:	d013      	beq.n	800348a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	4a7d      	ldr	r2, [pc, #500]	; (800365c <HAL_UART_IRQHandler+0x3dc>)
 8003468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f90c 	bl	800168c <HAL_DMA_Abort_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003484:	4610      	mov	r0, r2
 8003486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	e00e      	b.n	80034a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9a4 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	e00a      	b.n	80034a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9a0 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	e006      	b.n	80034a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f99c 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034a6:	e170      	b.n	800378a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	bf00      	nop
    return;
 80034aa:	e16e      	b.n	800378a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	f040 814a 	bne.w	800374a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8143 	beq.w	800374a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 813c 	beq.w	800374a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	f040 80b4 	bne.w	8003660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8140 	beq.w	800378e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003516:	429a      	cmp	r2, r3
 8003518:	f080 8139 	bcs.w	800378e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	f000 8088 	beq.w	8003642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800354c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800355e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800356a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1d9      	bne.n	8003532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800358e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e1      	bne.n	800357e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e3      	bne.n	80035ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003624:	65ba      	str	r2, [r7, #88]	; 0x58
 8003626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800362a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e3      	bne.n	8003600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd ffb5 	bl	80015ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364a:	b29b      	uxth	r3, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	b29b      	uxth	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fa1e 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003658:	e099      	b.n	800378e <HAL_UART_IRQHandler+0x50e>
 800365a:	bf00      	nop
 800365c:	08003a4d 	.word	0x08003a4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003668:	b29b      	uxth	r3, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 808b 	beq.w	8003792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800367c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8086 	beq.w	8003792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800369c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036aa:	647a      	str	r2, [r7, #68]	; 0x44
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e3      	bne.n	8003686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	623b      	str	r3, [r7, #32]
   return(result);
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036e2:	633a      	str	r2, [r7, #48]	; 0x30
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e3      	bne.n	80036be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	60fb      	str	r3, [r7, #12]
   return(result);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0310 	bic.w	r3, r3, #16
 800371a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003728:	61fa      	str	r2, [r7, #28]
 800372a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	617b      	str	r3, [r7, #20]
   return(result);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e3      	bne.n	8003704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f9a6 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003748:	e023      	b.n	8003792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_UART_IRQHandler+0x4ea>
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f986 	bl	8003a74 <UART_Transmit_IT>
    return;
 8003768:	e014      	b.n	8003794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <HAL_UART_IRQHandler+0x514>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9c6 	bl	8003b14 <UART_EndTransmit_IT>
    return;
 8003788:	e004      	b.n	8003794 <HAL_UART_IRQHandler+0x514>
    return;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_UART_IRQHandler+0x514>
      return;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_UART_IRQHandler+0x514>
      return;
 8003792:	bf00      	nop
  }
}
 8003794:	37e8      	adds	r7, #232	; 0xe8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop

0800379c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b090      	sub	sp, #64	; 0x40
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d137      	bne.n	8003878 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	2200      	movs	r2, #0
 800380c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	623b      	str	r3, [r7, #32]
   return(result);
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382e:	633a      	str	r2, [r7, #48]	; 0x30
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e5      	bne.n	800380e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	60fb      	str	r3, [r7, #12]
   return(result);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003862:	61fa      	str	r2, [r7, #28]
 8003864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	617b      	str	r3, [r7, #20]
   return(result);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e5      	bne.n	8003842 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003876:	e002      	b.n	800387e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800387a:	f7ff ff8f 	bl	800379c <HAL_UART_TxCpltCallback>
}
 800387e:	bf00      	nop
 8003880:	3740      	adds	r7, #64	; 0x40
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff ff8b 	bl	80037b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b21      	cmp	r3, #33	; 0x21
 80038d4:	d108      	bne.n	80038e8 <UART_DMAError+0x46>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80038e2:	68b8      	ldr	r0, [r7, #8]
 80038e4:	f000 f827 	bl	8003936 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	d108      	bne.n	800391c <UART_DMAError+0x7a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003916:	68b8      	ldr	r0, [r7, #8]
 8003918:	f000 f835 	bl	8003986 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003928:	68b8      	ldr	r0, [r7, #8]
 800392a:	f7ff ff55 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003936:	b480      	push	{r7}
 8003938:	b089      	sub	sp, #36	; 0x24
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	60bb      	str	r3, [r7, #8]
   return(result);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	61ba      	str	r2, [r7, #24]
 8003960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003986:	b480      	push	{r7}
 8003988:	b095      	sub	sp, #84	; 0x54
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ae:	643a      	str	r2, [r7, #64]	; 0x40
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d119      	bne.n	8003a32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0310 	bic.w	r3, r3, #16
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a1e:	61ba      	str	r2, [r7, #24]
 8003a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e5      	bne.n	80039fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a40:	bf00      	nop
 8003a42:	3754      	adds	r7, #84	; 0x54
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff feb6 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b21      	cmp	r3, #33	; 0x21
 8003a86:	d13e      	bne.n	8003b06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d114      	bne.n	8003abc <UART_Transmit_IT+0x48>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d110      	bne.n	8003abc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]
 8003aba:	e008      	b.n	8003ace <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6211      	str	r1, [r2, #32]
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4619      	mov	r1, r3
 8003adc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fe31 	bl	800379c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	; 0x30
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b22      	cmp	r3, #34	; 0x22
 8003b56:	f040 80ab 	bne.w	8003cb0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d117      	bne.n	8003b94 <UART_Receive_IT+0x50>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
 8003b92:	e026      	b.n	8003be2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d007      	beq.n	8003bb8 <UART_Receive_IT+0x74>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <UART_Receive_IT+0x82>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e008      	b.n	8003bd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d15a      	bne.n	8003cac <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0220 	bic.w	r2, r2, #32
 8003c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d135      	bne.n	8003ca2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f023 0310 	bic.w	r3, r3, #16
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	623a      	str	r2, [r7, #32]
 8003c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	69f9      	ldr	r1, [r7, #28]
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d10a      	bne.n	8003c94 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc fefa 	bl	8000a94 <HAL_UARTEx_RxEventCallback>
 8003ca0:	e002      	b.n	8003ca8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fd8e 	bl	80037c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e002      	b.n	8003cb2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3730      	adds	r7, #48	; 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b0c0      	sub	sp, #256	; 0x100
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	ea40 0301 	orr.w	r3, r0, r1
 8003ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d14:	f021 010c 	bic.w	r1, r1, #12
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d22:	430b      	orrs	r3, r1
 8003d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d36:	6999      	ldr	r1, [r3, #24]
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	ea40 0301 	orr.w	r3, r0, r1
 8003d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <UART_SetConfig+0x2cc>)
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d005      	beq.n	8003d5c <UART_SetConfig+0xa0>
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <UART_SetConfig+0x2d0>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d104      	bne.n	8003d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7ff f9b0 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8003d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d64:	e003      	b.n	8003d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d66:	f7ff f997 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	f040 810c 	bne.w	8003f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d8e:	4622      	mov	r2, r4
 8003d90:	462b      	mov	r3, r5
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d96:	415b      	adcs	r3, r3
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d9e:	4621      	mov	r1, r4
 8003da0:	eb12 0801 	adds.w	r8, r2, r1
 8003da4:	4629      	mov	r1, r5
 8003da6:	eb43 0901 	adc.w	r9, r3, r1
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dbe:	4690      	mov	r8, r2
 8003dc0:	4699      	mov	r9, r3
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	eb18 0303 	adds.w	r3, r8, r3
 8003dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dcc:	462b      	mov	r3, r5
 8003dce:	eb49 0303 	adc.w	r3, r9, r3
 8003dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dea:	460b      	mov	r3, r1
 8003dec:	18db      	adds	r3, r3, r3
 8003dee:	653b      	str	r3, [r7, #80]	; 0x50
 8003df0:	4613      	mov	r3, r2
 8003df2:	eb42 0303 	adc.w	r3, r2, r3
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
 8003df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e00:	f7fc fa46 	bl	8000290 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <UART_SetConfig+0x2d4>)
 8003e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	011c      	lsls	r4, r3, #4
 8003e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e34:	4641      	mov	r1, r8
 8003e36:	eb12 0a01 	adds.w	sl, r2, r1
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e54:	4692      	mov	sl, r2
 8003e56:	469b      	mov	fp, r3
 8003e58:	4643      	mov	r3, r8
 8003e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e62:	464b      	mov	r3, r9
 8003e64:	eb4b 0303 	adc.w	r3, fp, r3
 8003e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e80:	460b      	mov	r3, r1
 8003e82:	18db      	adds	r3, r3, r3
 8003e84:	643b      	str	r3, [r7, #64]	; 0x40
 8003e86:	4613      	mov	r3, r2
 8003e88:	eb42 0303 	adc.w	r3, r2, r3
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e96:	f7fc f9fb 	bl	8000290 <__aeabi_uldivmod>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <UART_SetConfig+0x2d4>)
 8003ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2264      	movs	r2, #100	; 0x64
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	1acb      	subs	r3, r1, r3
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <UART_SetConfig+0x2d4>)
 8003eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec4:	441c      	add	r4, r3
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6339      	str	r1, [r7, #48]	; 0x30
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	460a      	mov	r2, r1
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	18db      	adds	r3, r3, r3
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f42:	4613      	mov	r3, r2
 8003f44:	eb42 0303 	adc.w	r3, r2, r3
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f52:	f7fc f99d 	bl	8000290 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <UART_SetConfig+0x2d4>)
 8003f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	2164      	movs	r1, #100	; 0x64
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	3332      	adds	r3, #50	; 0x32
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <UART_SetConfig+0x2d4>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	f003 0207 	and.w	r2, r3, #7
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4422      	add	r2, r4
 8003f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f84:	e105      	b.n	8004192 <UART_SetConfig+0x4d6>
 8003f86:	bf00      	nop
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40011400 	.word	0x40011400
 8003f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	464b      	mov	r3, r9
 8003faa:	1891      	adds	r1, r2, r2
 8003fac:	6239      	str	r1, [r7, #32]
 8003fae:	415b      	adcs	r3, r3
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	1854      	adds	r4, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb43 0501 	adc.w	r5, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	00eb      	lsls	r3, r5, #3
 8003fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fce:	00e2      	lsls	r2, r4, #3
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	18e3      	adds	r3, r4, r3
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fdc:	464b      	mov	r3, r9
 8003fde:	eb45 0303 	adc.w	r3, r5, r3
 8003fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004002:	4629      	mov	r1, r5
 8004004:	008b      	lsls	r3, r1, #2
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400c:	4621      	mov	r1, r4
 800400e:	008a      	lsls	r2, r1, #2
 8004010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004014:	f7fc f93c 	bl	8000290 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4b60      	ldr	r3, [pc, #384]	; (80041a0 <UART_SetConfig+0x4e4>)
 800401e:	fba3 2302 	umull	r2, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	011c      	lsls	r4, r3, #4
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	61b9      	str	r1, [r7, #24]
 8004040:	415b      	adcs	r3, r3
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004048:	4641      	mov	r1, r8
 800404a:	1851      	adds	r1, r2, r1
 800404c:	6139      	str	r1, [r7, #16]
 800404e:	4649      	mov	r1, r9
 8004050:	414b      	adcs	r3, r1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004060:	4659      	mov	r1, fp
 8004062:	00cb      	lsls	r3, r1, #3
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406a:	4651      	mov	r1, sl
 800406c:	00ca      	lsls	r2, r1, #3
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	4603      	mov	r3, r0
 8004074:	4642      	mov	r2, r8
 8004076:	189b      	adds	r3, r3, r2
 8004078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800407c:	464b      	mov	r3, r9
 800407e:	460a      	mov	r2, r1
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	67bb      	str	r3, [r7, #120]	; 0x78
 8004092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040a0:	4649      	mov	r1, r9
 80040a2:	008b      	lsls	r3, r1, #2
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040aa:	4641      	mov	r1, r8
 80040ac:	008a      	lsls	r2, r1, #2
 80040ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040b2:	f7fc f8ed 	bl	8000290 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <UART_SetConfig+0x4e4>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	; 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	3332      	adds	r3, #50	; 0x32
 80040ce:	4a34      	ldr	r2, [pc, #208]	; (80041a0 <UART_SetConfig+0x4e4>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040da:	441c      	add	r4, r3
 80040dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e0:	2200      	movs	r2, #0
 80040e2:	673b      	str	r3, [r7, #112]	; 0x70
 80040e4:	677a      	str	r2, [r7, #116]	; 0x74
 80040e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040ea:	4642      	mov	r2, r8
 80040ec:	464b      	mov	r3, r9
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040fa:	4641      	mov	r1, r8
 80040fc:	1851      	adds	r1, r2, r1
 80040fe:	6039      	str	r1, [r7, #0]
 8004100:	4649      	mov	r1, r9
 8004102:	414b      	adcs	r3, r1
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004112:	4659      	mov	r1, fp
 8004114:	00cb      	lsls	r3, r1, #3
 8004116:	4651      	mov	r1, sl
 8004118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411c:	4651      	mov	r1, sl
 800411e:	00ca      	lsls	r2, r1, #3
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	4603      	mov	r3, r0
 8004126:	4642      	mov	r2, r8
 8004128:	189b      	adds	r3, r3, r2
 800412a:	66bb      	str	r3, [r7, #104]	; 0x68
 800412c:	464b      	mov	r3, r9
 800412e:	460a      	mov	r2, r1
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	663b      	str	r3, [r7, #96]	; 0x60
 8004140:	667a      	str	r2, [r7, #100]	; 0x64
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800414e:	4649      	mov	r1, r9
 8004150:	008b      	lsls	r3, r1, #2
 8004152:	4641      	mov	r1, r8
 8004154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004158:	4641      	mov	r1, r8
 800415a:	008a      	lsls	r2, r1, #2
 800415c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004160:	f7fc f896 	bl	8000290 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <UART_SetConfig+0x4e4>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <UART_SetConfig+0x4e4>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4422      	add	r2, r4
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	bf00      	nop
 8004194:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	51eb851f 	.word	0x51eb851f

080041a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a4:	b084      	sub	sp, #16
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	f107 001c 	add.w	r0, r7, #28
 80041b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d122      	bne.n	8004202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 faa2 	bl	8004740 <USB_CoreReset>
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e01a      	b.n	8004238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa96 	bl	8004740 <USB_CoreReset>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
 800422a:	e005      	b.n	8004238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10b      	bne.n	8004256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f043 0206 	orr.w	r2, r3, #6
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004262:	b004      	add	sp, #16
 8004264:	4770      	bx	lr

08004266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d115      	bne.n	80042d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042b6:	2001      	movs	r0, #1
 80042b8:	f7fc ff3c 	bl	8001134 <HAL_Delay>
      ms++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa2e 	bl	8004724 <USB_GetMode>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d01e      	beq.n	800430c <USB_SetCurrentMode+0x84>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b31      	cmp	r3, #49	; 0x31
 80042d2:	d9f0      	bls.n	80042b6 <USB_SetCurrentMode+0x2e>
 80042d4:	e01a      	b.n	800430c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f7fc ff23 	bl	8001134 <HAL_Delay>
      ms++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa15 	bl	8004724 <USB_GetMode>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <USB_SetCurrentMode+0x84>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b31      	cmp	r3, #49	; 0x31
 8004304:	d9f0      	bls.n	80042e8 <USB_SetCurrentMode+0x60>
 8004306:	e001      	b.n	800430c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e005      	b.n	8004318 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b32      	cmp	r3, #50	; 0x32
 8004310:	d101      	bne.n	8004316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004320:	b084      	sub	sp, #16
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800432e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e009      	b.n	8004354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3340      	adds	r3, #64	; 0x40
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3301      	adds	r3, #1
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b0e      	cmp	r3, #14
 8004358:	d9f2      	bls.n	8004340 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11c      	bne.n	800439a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436e:	f043 0302 	orr.w	r3, r3, #2
 8004372:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
 8004398:	e00b      	b.n	80043b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	4619      	mov	r1, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	461a      	mov	r2, r3
 80043ce:	680b      	ldr	r3, [r1, #0]
 80043d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10c      	bne.n	80043f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f965 	bl	80046b0 <USB_SetDevSpeed>
 80043e6:	e008      	b.n	80043fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f960 	bl	80046b0 <USB_SetDevSpeed>
 80043f0:	e003      	b.n	80043fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043f2:	2103      	movs	r1, #3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f95b 	bl	80046b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043fa:	2110      	movs	r1, #16
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8f3 	bl	80045e8 <USB_FlushTxFifo>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f91f 	bl	8004650 <USB_FlushRxFifo>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	461a      	mov	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	461a      	mov	r2, r3
 800443c:	2300      	movs	r3, #0
 800443e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e043      	b.n	80044ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445c:	d118      	bne.n	8004490 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	461a      	mov	r2, r3
 8004472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e013      	b.n	80044a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e008      	b.n	80044a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	461a      	mov	r2, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	461a      	mov	r2, r3
 80044c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3301      	adds	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3b7      	bcc.n	8004446 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e043      	b.n	8004564 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f2:	d118      	bne.n	8004526 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e013      	b.n	8004538 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e008      	b.n	8004538 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	461a      	mov	r2, r3
 8004534:	2300      	movs	r3, #0
 8004536:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	461a      	mov	r2, r3
 8004558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800455c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d3b7      	bcc.n	80044dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800458c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f043 0210 	orr.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <USB_DevInit+0x2c4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f043 0208 	orr.w	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e0:	b004      	add	sp, #16
 80045e2:	4770      	bx	lr
 80045e4:	803c3800 	.word	0x803c3800

080045e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <USB_FlushTxFifo+0x64>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e01b      	b.n	8004640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	daf2      	bge.n	80045f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	019b      	lsls	r3, r3, #6
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <USB_FlushTxFifo+0x64>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e006      	b.n	8004640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d0f0      	beq.n	8004620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	00030d40 	.word	0x00030d40

08004650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <USB_FlushRxFifo+0x5c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e018      	b.n	80046a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	daf2      	bge.n	800465c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2210      	movs	r2, #16
 800467e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a08      	ldr	r2, [pc, #32]	; (80046ac <USB_FlushRxFifo+0x5c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e006      	b.n	80046a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d0f0      	beq.n	8004680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	00030d40 	.word	0x00030d40

080046b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0301 	and.w	r3, r3, #1
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <USB_CoreReset+0x64>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e01b      	b.n	8004796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	daf2      	bge.n	800474c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <USB_CoreReset+0x64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e006      	b.n	8004796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d0f0      	beq.n	8004776 <USB_CoreReset+0x36>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	00030d40 	.word	0x00030d40

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 fc8e 	bl	80050e8 <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08005164 	.word	0x08005164
 80047f0:	08005164 	.word	0x08005164
 80047f4:	08005164 	.word	0x08005164
 80047f8:	08005168 	.word	0x08005168

080047fc <memset>:
 80047fc:	4402      	add	r2, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	4293      	cmp	r3, r2
 8004802:	d100      	bne.n	8004806 <memset+0xa>
 8004804:	4770      	bx	lr
 8004806:	f803 1b01 	strb.w	r1, [r3], #1
 800480a:	e7f9      	b.n	8004800 <memset+0x4>

0800480c <siprintf>:
 800480c:	b40e      	push	{r1, r2, r3}
 800480e:	b500      	push	{lr}
 8004810:	b09c      	sub	sp, #112	; 0x70
 8004812:	ab1d      	add	r3, sp, #116	; 0x74
 8004814:	9002      	str	r0, [sp, #8]
 8004816:	9006      	str	r0, [sp, #24]
 8004818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <siprintf+0x38>)
 800481e:	9107      	str	r1, [sp, #28]
 8004820:	9104      	str	r1, [sp, #16]
 8004822:	4909      	ldr	r1, [pc, #36]	; (8004848 <siprintf+0x3c>)
 8004824:	f853 2b04 	ldr.w	r2, [r3], #4
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	a902      	add	r1, sp, #8
 8004830:	f000 f868 	bl	8004904 <_svfiprintf_r>
 8004834:	9b02      	ldr	r3, [sp, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	b01c      	add	sp, #112	; 0x70
 800483c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004840:	b003      	add	sp, #12
 8004842:	4770      	bx	lr
 8004844:	2000000c 	.word	0x2000000c
 8004848:	ffff0208 	.word	0xffff0208

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	429e      	cmp	r6, r3
 8004854:	4682      	mov	sl, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	461f      	mov	r7, r3
 800485c:	d838      	bhi.n	80048d0 <__ssputs_r+0x84>
 800485e:	898a      	ldrh	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004864:	d032      	beq.n	80048cc <__ssputs_r+0x80>
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	eba5 0901 	sub.w	r9, r5, r1
 800486e:	6965      	ldr	r5, [r4, #20]
 8004870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004878:	3301      	adds	r3, #1
 800487a:	444b      	add	r3, r9
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d531      	bpl.n	80048ec <__ssputs_r+0xa0>
 8004888:	4629      	mov	r1, r5
 800488a:	f000 fb63 	bl	8004f54 <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b950      	cbnz	r0, 80048a8 <__ssputs_r+0x5c>
 8004892:	230c      	movs	r3, #12
 8004894:	f8ca 3000 	str.w	r3, [sl]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	6921      	ldr	r1, [r4, #16]
 80048aa:	464a      	mov	r2, r9
 80048ac:	f000 fabe 	bl	8004e2c <memcpy>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	444e      	add	r6, r9
 80048c2:	eba5 0509 	sub.w	r5, r5, r9
 80048c6:	6026      	str	r6, [r4, #0]
 80048c8:	60a5      	str	r5, [r4, #8]
 80048ca:	463e      	mov	r6, r7
 80048cc:	42be      	cmp	r6, r7
 80048ce:	d900      	bls.n	80048d2 <__ssputs_r+0x86>
 80048d0:	463e      	mov	r6, r7
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	4632      	mov	r2, r6
 80048d6:	4641      	mov	r1, r8
 80048d8:	f000 fab6 	bl	8004e48 <memmove>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	1b9b      	subs	r3, r3, r6
 80048e0:	60a3      	str	r3, [r4, #8]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	4433      	add	r3, r6
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e7db      	b.n	80048a4 <__ssputs_r+0x58>
 80048ec:	462a      	mov	r2, r5
 80048ee:	f000 fba5 	bl	800503c <_realloc_r>
 80048f2:	4606      	mov	r6, r0
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d1e1      	bne.n	80048bc <__ssputs_r+0x70>
 80048f8:	6921      	ldr	r1, [r4, #16]
 80048fa:	4650      	mov	r0, sl
 80048fc:	f000 fabe 	bl	8004e7c <_free_r>
 8004900:	e7c7      	b.n	8004892 <__ssputs_r+0x46>
	...

08004904 <_svfiprintf_r>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4698      	mov	r8, r3
 800490a:	898b      	ldrh	r3, [r1, #12]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	b09d      	sub	sp, #116	; 0x74
 8004910:	4607      	mov	r7, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4614      	mov	r4, r2
 8004916:	d50e      	bpl.n	8004936 <_svfiprintf_r+0x32>
 8004918:	690b      	ldr	r3, [r1, #16]
 800491a:	b963      	cbnz	r3, 8004936 <_svfiprintf_r+0x32>
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	f000 fb19 	bl	8004f54 <_malloc_r>
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	6128      	str	r0, [r5, #16]
 8004926:	b920      	cbnz	r0, 8004932 <_svfiprintf_r+0x2e>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e0d1      	b.n	8004ad6 <_svfiprintf_r+0x1d2>
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	2320      	movs	r3, #32
 800493c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004940:	f8cd 800c 	str.w	r8, [sp, #12]
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004af0 <_svfiprintf_r+0x1ec>
 800494a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494e:	f04f 0901 	mov.w	r9, #1
 8004952:	4623      	mov	r3, r4
 8004954:	469a      	mov	sl, r3
 8004956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495a:	b10a      	cbz	r2, 8004960 <_svfiprintf_r+0x5c>
 800495c:	2a25      	cmp	r2, #37	; 0x25
 800495e:	d1f9      	bne.n	8004954 <_svfiprintf_r+0x50>
 8004960:	ebba 0b04 	subs.w	fp, sl, r4
 8004964:	d00b      	beq.n	800497e <_svfiprintf_r+0x7a>
 8004966:	465b      	mov	r3, fp
 8004968:	4622      	mov	r2, r4
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff6d 	bl	800484c <__ssputs_r>
 8004972:	3001      	adds	r0, #1
 8004974:	f000 80aa 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497a:	445a      	add	r2, fp
 800497c:	9209      	str	r2, [sp, #36]	; 0x24
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a2 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499e:	931a      	str	r3, [sp, #104]	; 0x68
 80049a0:	4654      	mov	r4, sl
 80049a2:	2205      	movs	r2, #5
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	4851      	ldr	r0, [pc, #324]	; (8004af0 <_svfiprintf_r+0x1ec>)
 80049aa:	f7fb fc21 	bl	80001f0 <memchr>
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	b9d8      	cbnz	r0, 80049ea <_svfiprintf_r+0xe6>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	bf44      	itt	mi
 80049b6:	2320      	movmi	r3, #32
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	bf44      	itt	mi
 80049c0:	232b      	movmi	r3, #43	; 0x2b
 80049c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d015      	beq.n	80049fa <_svfiprintf_r+0xf6>
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4654      	mov	r4, sl
 80049d2:	2000      	movs	r0, #0
 80049d4:	f04f 0c0a 	mov.w	ip, #10
 80049d8:	4621      	mov	r1, r4
 80049da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049de:	3b30      	subs	r3, #48	; 0x30
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d94e      	bls.n	8004a82 <_svfiprintf_r+0x17e>
 80049e4:	b1b0      	cbz	r0, 8004a14 <_svfiprintf_r+0x110>
 80049e6:	9207      	str	r2, [sp, #28]
 80049e8:	e014      	b.n	8004a14 <_svfiprintf_r+0x110>
 80049ea:	eba0 0308 	sub.w	r3, r0, r8
 80049ee:	fa09 f303 	lsl.w	r3, r9, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	46a2      	mov	sl, r4
 80049f8:	e7d2      	b.n	80049a0 <_svfiprintf_r+0x9c>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9103      	str	r1, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfbb      	ittet	lt
 8004a06:	425b      	neglt	r3, r3
 8004a08:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0c:	9307      	strge	r3, [sp, #28]
 8004a0e:	9307      	strlt	r3, [sp, #28]
 8004a10:	bfb8      	it	lt
 8004a12:	9204      	strlt	r2, [sp, #16]
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2e      	cmp	r3, #46	; 0x2e
 8004a18:	d10c      	bne.n	8004a34 <_svfiprintf_r+0x130>
 8004a1a:	7863      	ldrb	r3, [r4, #1]
 8004a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1e:	d135      	bne.n	8004a8c <_svfiprintf_r+0x188>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bfb8      	it	lt
 8004a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a30:	3402      	adds	r4, #2
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b00 <_svfiprintf_r+0x1fc>
 8004a38:	7821      	ldrb	r1, [r4, #0]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	f7fb fbd7 	bl	80001f0 <memchr>
 8004a42:	b140      	cbz	r0, 8004a56 <_svfiprintf_r+0x152>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	eba0 000a 	sub.w	r0, r0, sl
 8004a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4e:	9b04      	ldr	r3, [sp, #16]
 8004a50:	4303      	orrs	r3, r0
 8004a52:	3401      	adds	r4, #1
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4826      	ldr	r0, [pc, #152]	; (8004af4 <_svfiprintf_r+0x1f0>)
 8004a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a60:	2206      	movs	r2, #6
 8004a62:	f7fb fbc5 	bl	80001f0 <memchr>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d038      	beq.n	8004adc <_svfiprintf_r+0x1d8>
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <_svfiprintf_r+0x1f4>)
 8004a6c:	bb1b      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x1b2>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	3308      	adds	r3, #8
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7c:	4433      	add	r3, r6
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	e767      	b.n	8004952 <_svfiprintf_r+0x4e>
 8004a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a86:	460c      	mov	r4, r1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	e7a5      	b.n	80049d8 <_svfiprintf_r+0xd4>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	3401      	adds	r4, #1
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0c0a 	mov.w	ip, #10
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9e:	3a30      	subs	r2, #48	; 0x30
 8004aa0:	2a09      	cmp	r2, #9
 8004aa2:	d903      	bls.n	8004aac <_svfiprintf_r+0x1a8>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0c5      	beq.n	8004a34 <_svfiprintf_r+0x130>
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	e7c3      	b.n	8004a34 <_svfiprintf_r+0x130>
 8004aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7f0      	b.n	8004a98 <_svfiprintf_r+0x194>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004abe:	a904      	add	r1, sp, #16
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f3af 8000 	nop.w
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	4606      	mov	r6, r0
 8004aca:	d1d6      	bne.n	8004a7a <_svfiprintf_r+0x176>
 8004acc:	89ab      	ldrh	r3, [r5, #12]
 8004ace:	065b      	lsls	r3, r3, #25
 8004ad0:	f53f af2c 	bmi.w	800492c <_svfiprintf_r+0x28>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	b01d      	add	sp, #116	; 0x74
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	ab03      	add	r3, sp, #12
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f000 f87a 	bl	8004be0 <_printf_i>
 8004aec:	e7eb      	b.n	8004ac6 <_svfiprintf_r+0x1c2>
 8004aee:	bf00      	nop
 8004af0:	08005128 	.word	0x08005128
 8004af4:	08005132 	.word	0x08005132
 8004af8:	00000000 	.word	0x00000000
 8004afc:	0800484d 	.word	0x0800484d
 8004b00:	0800512e 	.word	0x0800512e

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	68e5      	ldr	r5, [r4, #12]
 8004b6e:	6832      	ldr	r2, [r6, #0]
 8004b70:	f003 0306 	and.w	r3, r3, #6
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	bf08      	it	eq
 8004b78:	1aad      	subeq	r5, r5, r2
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	6922      	ldr	r2, [r4, #16]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	7e0f      	ldrb	r7, [r1, #24]
 8004be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004be8:	2f78      	cmp	r7, #120	; 0x78
 8004bea:	4691      	mov	r9, r2
 8004bec:	4680      	mov	r8, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d8 	beq.w	8004db2 <_printf_i+0x1d2>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80a3 	beq.w	8004d4e <_printf_i+0x16e>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a101      	add	r1, pc, #4	; (adr r1, 8004c20 <_printf_i+0x40>)
 8004c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d99 	.word	0x08004d99
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004d7b 	.word	0x08004d7b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004dbb 	.word	0x08004dbb
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d83 	.word	0x08004d83
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a3      	b.n	8004dd4 <_printf_i+0x1f4>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	6829      	ldr	r1, [r5, #0]
 8004c90:	0606      	lsls	r6, r0, #24
 8004c92:	f101 0304 	add.w	r3, r1, #4
 8004c96:	d50a      	bpl.n	8004cae <_printf_i+0xce>
 8004c98:	680e      	ldr	r6, [r1, #0]
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	2e00      	cmp	r6, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xc8>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	4276      	negs	r6, r6
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <_printf_i+0x244>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e019      	b.n	8004ce2 <_printf_i+0x102>
 8004cae:	680e      	ldr	r6, [r1, #0]
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cb6:	bf18      	it	ne
 8004cb8:	b236      	sxthne	r6, r6
 8004cba:	e7ef      	b.n	8004c9c <_printf_i+0xbc>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	6820      	ldr	r0, [r4, #0]
 8004cc0:	1d19      	adds	r1, r3, #4
 8004cc2:	6029      	str	r1, [r5, #0]
 8004cc4:	0601      	lsls	r1, r0, #24
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0xec>
 8004cc8:	681e      	ldr	r6, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0xf2>
 8004ccc:	0646      	lsls	r6, r0, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cd0:	881e      	ldrh	r6, [r3, #0]
 8004cd2:	4854      	ldr	r0, [pc, #336]	; (8004e24 <_printf_i+0x244>)
 8004cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2308      	moveq	r3, #8
 8004cda:	230a      	movne	r3, #10
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce2:	6865      	ldr	r5, [r4, #4]
 8004ce4:	60a5      	str	r5, [r4, #8]
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	bfa2      	ittt	ge
 8004cea:	6821      	ldrge	r1, [r4, #0]
 8004cec:	f021 0104 	bicge.w	r1, r1, #4
 8004cf0:	6021      	strge	r1, [r4, #0]
 8004cf2:	b90e      	cbnz	r6, 8004cf8 <_printf_i+0x118>
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d04d      	beq.n	8004d94 <_printf_i+0x1b4>
 8004cf8:	4615      	mov	r5, r2
 8004cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8004d02:	5dc7      	ldrb	r7, [r0, r7]
 8004d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d08:	4637      	mov	r7, r6
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	460e      	mov	r6, r1
 8004d0e:	d9f4      	bls.n	8004cfa <_printf_i+0x11a>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10b      	bne.n	8004d2c <_printf_i+0x14c>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07de      	lsls	r6, r3, #31
 8004d18:	d508      	bpl.n	8004d2c <_printf_i+0x14c>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6861      	ldr	r1, [r4, #4]
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	bfde      	ittt	le
 8004d22:	2330      	movle	r3, #48	; 0x30
 8004d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d2c:	1b52      	subs	r2, r2, r5
 8004d2e:	6122      	str	r2, [r4, #16]
 8004d30:	f8cd a000 	str.w	sl, [sp]
 8004d34:	464b      	mov	r3, r9
 8004d36:	aa03      	add	r2, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fee2 	bl	8004b04 <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d14c      	bne.n	8004dde <_printf_i+0x1fe>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	b004      	add	sp, #16
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	4835      	ldr	r0, [pc, #212]	; (8004e24 <_printf_i+0x244>)
 8004d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d54:	6829      	ldr	r1, [r5, #0]
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d5c:	6029      	str	r1, [r5, #0]
 8004d5e:	061d      	lsls	r5, r3, #24
 8004d60:	d514      	bpl.n	8004d8c <_printf_i+0x1ac>
 8004d62:	07df      	lsls	r7, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b91e      	cbnz	r6, 8004d76 <_printf_i+0x196>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	2310      	movs	r3, #16
 8004d78:	e7b0      	b.n	8004cdc <_printf_i+0xfc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	2378      	movs	r3, #120	; 0x78
 8004d84:	4828      	ldr	r0, [pc, #160]	; (8004e28 <_printf_i+0x248>)
 8004d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8a:	e7e3      	b.n	8004d54 <_printf_i+0x174>
 8004d8c:	0659      	lsls	r1, r3, #25
 8004d8e:	bf48      	it	mi
 8004d90:	b2b6      	uxthmi	r6, r6
 8004d92:	e7e6      	b.n	8004d62 <_printf_i+0x182>
 8004d94:	4615      	mov	r5, r2
 8004d96:	e7bb      	b.n	8004d10 <_printf_i+0x130>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	6826      	ldr	r6, [r4, #0]
 8004d9c:	6961      	ldr	r1, [r4, #20]
 8004d9e:	1d18      	adds	r0, r3, #4
 8004da0:	6028      	str	r0, [r5, #0]
 8004da2:	0635      	lsls	r5, r6, #24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	d501      	bpl.n	8004dac <_printf_i+0x1cc>
 8004da8:	6019      	str	r1, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <_printf_i+0x1d2>
 8004dac:	0670      	lsls	r0, r6, #25
 8004dae:	d5fb      	bpl.n	8004da8 <_printf_i+0x1c8>
 8004db0:	8019      	strh	r1, [r3, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	4615      	mov	r5, r2
 8004db8:	e7ba      	b.n	8004d30 <_printf_i+0x150>
 8004dba:	682b      	ldr	r3, [r5, #0]
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	602a      	str	r2, [r5, #0]
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f7fb fa12 	bl	80001f0 <memchr>
 8004dcc:	b108      	cbz	r0, 8004dd2 <_printf_i+0x1f2>
 8004dce:	1b40      	subs	r0, r0, r5
 8004dd0:	6060      	str	r0, [r4, #4]
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	e7a8      	b.n	8004d30 <_printf_i+0x150>
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	462a      	mov	r2, r5
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0ab      	beq.n	8004d44 <_printf_i+0x164>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	d413      	bmi.n	8004e1a <_printf_i+0x23a>
 8004df2:	68e0      	ldr	r0, [r4, #12]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bfb8      	it	lt
 8004dfa:	4618      	movlt	r0, r3
 8004dfc:	e7a4      	b.n	8004d48 <_printf_i+0x168>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4632      	mov	r2, r6
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d09b      	beq.n	8004d44 <_printf_i+0x164>
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	9903      	ldr	r1, [sp, #12]
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dcf2      	bgt.n	8004dfe <_printf_i+0x21e>
 8004e18:	e7eb      	b.n	8004df2 <_printf_i+0x212>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	f104 0619 	add.w	r6, r4, #25
 8004e20:	e7f5      	b.n	8004e0e <_printf_i+0x22e>
 8004e22:	bf00      	nop
 8004e24:	08005139 	.word	0x08005139
 8004e28:	0800514a 	.word	0x0800514a

08004e2c <memcpy>:
 8004e2c:	440a      	add	r2, r1
 8004e2e:	4291      	cmp	r1, r2
 8004e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e34:	d100      	bne.n	8004e38 <memcpy+0xc>
 8004e36:	4770      	bx	lr
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e42:	4291      	cmp	r1, r2
 8004e44:	d1f9      	bne.n	8004e3a <memcpy+0xe>
 8004e46:	bd10      	pop	{r4, pc}

08004e48 <memmove>:
 8004e48:	4288      	cmp	r0, r1
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	eb01 0402 	add.w	r4, r1, r2
 8004e50:	d902      	bls.n	8004e58 <memmove+0x10>
 8004e52:	4284      	cmp	r4, r0
 8004e54:	4623      	mov	r3, r4
 8004e56:	d807      	bhi.n	8004e68 <memmove+0x20>
 8004e58:	1e43      	subs	r3, r0, #1
 8004e5a:	42a1      	cmp	r1, r4
 8004e5c:	d008      	beq.n	8004e70 <memmove+0x28>
 8004e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e66:	e7f8      	b.n	8004e5a <memmove+0x12>
 8004e68:	4402      	add	r2, r0
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	428a      	cmp	r2, r1
 8004e6e:	d100      	bne.n	8004e72 <memmove+0x2a>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e7a:	e7f7      	b.n	8004e6c <memmove+0x24>

08004e7c <_free_r>:
 8004e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d044      	beq.n	8004f0c <_free_r+0x90>
 8004e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e86:	9001      	str	r0, [sp, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e8e:	bfb8      	it	lt
 8004e90:	18e4      	addlt	r4, r4, r3
 8004e92:	f000 f913 	bl	80050bc <__malloc_lock>
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <_free_r+0x94>)
 8004e98:	9801      	ldr	r0, [sp, #4]
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	b933      	cbnz	r3, 8004eac <_free_r+0x30>
 8004e9e:	6063      	str	r3, [r4, #4]
 8004ea0:	6014      	str	r4, [r2, #0]
 8004ea2:	b003      	add	sp, #12
 8004ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ea8:	f000 b90e 	b.w	80050c8 <__malloc_unlock>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d908      	bls.n	8004ec2 <_free_r+0x46>
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	1961      	adds	r1, r4, r5
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf01      	itttt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	1949      	addeq	r1, r1, r5
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	e7ed      	b.n	8004e9e <_free_r+0x22>
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	b10b      	cbz	r3, 8004ecc <_free_r+0x50>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d9fa      	bls.n	8004ec2 <_free_r+0x46>
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	1855      	adds	r5, r2, r1
 8004ed0:	42a5      	cmp	r5, r4
 8004ed2:	d10b      	bne.n	8004eec <_free_r+0x70>
 8004ed4:	6824      	ldr	r4, [r4, #0]
 8004ed6:	4421      	add	r1, r4
 8004ed8:	1854      	adds	r4, r2, r1
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	d1e0      	bne.n	8004ea2 <_free_r+0x26>
 8004ee0:	681c      	ldr	r4, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	6053      	str	r3, [r2, #4]
 8004ee6:	4421      	add	r1, r4
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	e7da      	b.n	8004ea2 <_free_r+0x26>
 8004eec:	d902      	bls.n	8004ef4 <_free_r+0x78>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	6003      	str	r3, [r0, #0]
 8004ef2:	e7d6      	b.n	8004ea2 <_free_r+0x26>
 8004ef4:	6825      	ldr	r5, [r4, #0]
 8004ef6:	1961      	adds	r1, r4, r5
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf04      	itt	eq
 8004efc:	6819      	ldreq	r1, [r3, #0]
 8004efe:	685b      	ldreq	r3, [r3, #4]
 8004f00:	6063      	str	r3, [r4, #4]
 8004f02:	bf04      	itt	eq
 8004f04:	1949      	addeq	r1, r1, r5
 8004f06:	6021      	streq	r1, [r4, #0]
 8004f08:	6054      	str	r4, [r2, #4]
 8004f0a:	e7ca      	b.n	8004ea2 <_free_r+0x26>
 8004f0c:	b003      	add	sp, #12
 8004f0e:	bd30      	pop	{r4, r5, pc}
 8004f10:	20000928 	.word	0x20000928

08004f14 <sbrk_aligned>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	4e0e      	ldr	r6, [pc, #56]	; (8004f50 <sbrk_aligned+0x3c>)
 8004f18:	460c      	mov	r4, r1
 8004f1a:	6831      	ldr	r1, [r6, #0]
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	b911      	cbnz	r1, 8004f26 <sbrk_aligned+0x12>
 8004f20:	f000 f8bc 	bl	800509c <_sbrk_r>
 8004f24:	6030      	str	r0, [r6, #0]
 8004f26:	4621      	mov	r1, r4
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 f8b7 	bl	800509c <_sbrk_r>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	d00a      	beq.n	8004f48 <sbrk_aligned+0x34>
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	f024 0403 	bic.w	r4, r4, #3
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d007      	beq.n	8004f4c <sbrk_aligned+0x38>
 8004f3c:	1a21      	subs	r1, r4, r0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 f8ac 	bl	800509c <_sbrk_r>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d101      	bne.n	8004f4c <sbrk_aligned+0x38>
 8004f48:	f04f 34ff 	mov.w	r4, #4294967295
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	2000092c 	.word	0x2000092c

08004f54 <_malloc_r>:
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	1ccd      	adds	r5, r1, #3
 8004f5a:	f025 0503 	bic.w	r5, r5, #3
 8004f5e:	3508      	adds	r5, #8
 8004f60:	2d0c      	cmp	r5, #12
 8004f62:	bf38      	it	cc
 8004f64:	250c      	movcc	r5, #12
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	4607      	mov	r7, r0
 8004f6a:	db01      	blt.n	8004f70 <_malloc_r+0x1c>
 8004f6c:	42a9      	cmp	r1, r5
 8004f6e:	d905      	bls.n	8004f7c <_malloc_r+0x28>
 8004f70:	230c      	movs	r3, #12
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	2600      	movs	r6, #0
 8004f76:	4630      	mov	r0, r6
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7c:	4e2e      	ldr	r6, [pc, #184]	; (8005038 <_malloc_r+0xe4>)
 8004f7e:	f000 f89d 	bl	80050bc <__malloc_lock>
 8004f82:	6833      	ldr	r3, [r6, #0]
 8004f84:	461c      	mov	r4, r3
 8004f86:	bb34      	cbnz	r4, 8004fd6 <_malloc_r+0x82>
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f7ff ffc2 	bl	8004f14 <sbrk_aligned>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	4604      	mov	r4, r0
 8004f94:	d14d      	bne.n	8005032 <_malloc_r+0xde>
 8004f96:	6834      	ldr	r4, [r6, #0]
 8004f98:	4626      	mov	r6, r4
 8004f9a:	2e00      	cmp	r6, #0
 8004f9c:	d140      	bne.n	8005020 <_malloc_r+0xcc>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	eb04 0803 	add.w	r8, r4, r3
 8004fa8:	f000 f878 	bl	800509c <_sbrk_r>
 8004fac:	4580      	cmp	r8, r0
 8004fae:	d13a      	bne.n	8005026 <_malloc_r+0xd2>
 8004fb0:	6821      	ldr	r1, [r4, #0]
 8004fb2:	3503      	adds	r5, #3
 8004fb4:	1a6d      	subs	r5, r5, r1
 8004fb6:	f025 0503 	bic.w	r5, r5, #3
 8004fba:	3508      	adds	r5, #8
 8004fbc:	2d0c      	cmp	r5, #12
 8004fbe:	bf38      	it	cc
 8004fc0:	250c      	movcc	r5, #12
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f7ff ffa5 	bl	8004f14 <sbrk_aligned>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d02b      	beq.n	8005026 <_malloc_r+0xd2>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	442b      	add	r3, r5
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	e00e      	b.n	8004ff4 <_malloc_r+0xa0>
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	1b52      	subs	r2, r2, r5
 8004fda:	d41e      	bmi.n	800501a <_malloc_r+0xc6>
 8004fdc:	2a0b      	cmp	r2, #11
 8004fde:	d916      	bls.n	800500e <_malloc_r+0xba>
 8004fe0:	1961      	adds	r1, r4, r5
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	6025      	str	r5, [r4, #0]
 8004fe6:	bf18      	it	ne
 8004fe8:	6059      	strne	r1, [r3, #4]
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	bf08      	it	eq
 8004fee:	6031      	streq	r1, [r6, #0]
 8004ff0:	5162      	str	r2, [r4, r5]
 8004ff2:	604b      	str	r3, [r1, #4]
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f104 060b 	add.w	r6, r4, #11
 8004ffa:	f000 f865 	bl	80050c8 <__malloc_unlock>
 8004ffe:	f026 0607 	bic.w	r6, r6, #7
 8005002:	1d23      	adds	r3, r4, #4
 8005004:	1af2      	subs	r2, r6, r3
 8005006:	d0b6      	beq.n	8004f76 <_malloc_r+0x22>
 8005008:	1b9b      	subs	r3, r3, r6
 800500a:	50a3      	str	r3, [r4, r2]
 800500c:	e7b3      	b.n	8004f76 <_malloc_r+0x22>
 800500e:	6862      	ldr	r2, [r4, #4]
 8005010:	42a3      	cmp	r3, r4
 8005012:	bf0c      	ite	eq
 8005014:	6032      	streq	r2, [r6, #0]
 8005016:	605a      	strne	r2, [r3, #4]
 8005018:	e7ec      	b.n	8004ff4 <_malloc_r+0xa0>
 800501a:	4623      	mov	r3, r4
 800501c:	6864      	ldr	r4, [r4, #4]
 800501e:	e7b2      	b.n	8004f86 <_malloc_r+0x32>
 8005020:	4634      	mov	r4, r6
 8005022:	6876      	ldr	r6, [r6, #4]
 8005024:	e7b9      	b.n	8004f9a <_malloc_r+0x46>
 8005026:	230c      	movs	r3, #12
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4638      	mov	r0, r7
 800502c:	f000 f84c 	bl	80050c8 <__malloc_unlock>
 8005030:	e7a1      	b.n	8004f76 <_malloc_r+0x22>
 8005032:	6025      	str	r5, [r4, #0]
 8005034:	e7de      	b.n	8004ff4 <_malloc_r+0xa0>
 8005036:	bf00      	nop
 8005038:	20000928 	.word	0x20000928

0800503c <_realloc_r>:
 800503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005040:	4680      	mov	r8, r0
 8005042:	4614      	mov	r4, r2
 8005044:	460e      	mov	r6, r1
 8005046:	b921      	cbnz	r1, 8005052 <_realloc_r+0x16>
 8005048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	4611      	mov	r1, r2
 800504e:	f7ff bf81 	b.w	8004f54 <_malloc_r>
 8005052:	b92a      	cbnz	r2, 8005060 <_realloc_r+0x24>
 8005054:	f7ff ff12 	bl	8004e7c <_free_r>
 8005058:	4625      	mov	r5, r4
 800505a:	4628      	mov	r0, r5
 800505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005060:	f000 f838 	bl	80050d4 <_malloc_usable_size_r>
 8005064:	4284      	cmp	r4, r0
 8005066:	4607      	mov	r7, r0
 8005068:	d802      	bhi.n	8005070 <_realloc_r+0x34>
 800506a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800506e:	d812      	bhi.n	8005096 <_realloc_r+0x5a>
 8005070:	4621      	mov	r1, r4
 8005072:	4640      	mov	r0, r8
 8005074:	f7ff ff6e 	bl	8004f54 <_malloc_r>
 8005078:	4605      	mov	r5, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	d0ed      	beq.n	800505a <_realloc_r+0x1e>
 800507e:	42bc      	cmp	r4, r7
 8005080:	4622      	mov	r2, r4
 8005082:	4631      	mov	r1, r6
 8005084:	bf28      	it	cs
 8005086:	463a      	movcs	r2, r7
 8005088:	f7ff fed0 	bl	8004e2c <memcpy>
 800508c:	4631      	mov	r1, r6
 800508e:	4640      	mov	r0, r8
 8005090:	f7ff fef4 	bl	8004e7c <_free_r>
 8005094:	e7e1      	b.n	800505a <_realloc_r+0x1e>
 8005096:	4635      	mov	r5, r6
 8005098:	e7df      	b.n	800505a <_realloc_r+0x1e>
	...

0800509c <_sbrk_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d06      	ldr	r5, [pc, #24]	; (80050b8 <_sbrk_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fb fd76 	bl	8000b98 <_sbrk>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_sbrk_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_sbrk_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000930 	.word	0x20000930

080050bc <__malloc_lock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__malloc_lock+0x8>)
 80050be:	f000 b811 	b.w	80050e4 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000934 	.word	0x20000934

080050c8 <__malloc_unlock>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__malloc_unlock+0x8>)
 80050ca:	f000 b80c 	b.w	80050e6 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20000934 	.word	0x20000934

080050d4 <_malloc_usable_size_r>:
 80050d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d8:	1f18      	subs	r0, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfbc      	itt	lt
 80050de:	580b      	ldrlt	r3, [r1, r0]
 80050e0:	18c0      	addlt	r0, r0, r3
 80050e2:	4770      	bx	lr

080050e4 <__retarget_lock_acquire_recursive>:
 80050e4:	4770      	bx	lr

080050e6 <__retarget_lock_release_recursive>:
 80050e6:	4770      	bx	lr

080050e8 <_init>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr

080050f4 <_fini>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr
