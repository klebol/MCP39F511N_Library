
MCP39F511_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000918  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000924  20000924  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bf3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272d  00000000  00000000  00030c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  00033ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025029  00000000  00000000  00034b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001027c  00000000  00000000  00059bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab6d  00000000  00000000  00069e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014499a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000333c  00000000  00000000  001449ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004b64 	.word	0x08004b64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004b64 	.word	0x08004b64

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MCP39F511_Init>:
#include "string.h"



void MCP39F511_Init(MCP39F511_t *IC, UART_HandleTypeDef *huart)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	IC->UART = huart; //define mcp's uart
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	601a      	str	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <MCP39F511_SendData>:
//
//
//

void MCP39F511_SendData(MCP39F511_t *IC, uint8_t Size)	//basic send function
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_DMA(IC->UART, IC->DataSendBuffer, Size);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3304      	adds	r3, #4
 8000520:	78fa      	ldrb	r2, [r7, #3]
 8000522:	b292      	uxth	r2, r2
 8000524:	4619      	mov	r1, r3
 8000526:	f002 fe23 	bl	8003170 <HAL_UART_Transmit_DMA>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <MCP39F511_ListenDMA>:

void MCP39F511_ListenDMA(MCP39F511_t *IC)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(IC -> UART,IC->TmpReceiveBuffer,32);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3327      	adds	r3, #39	; 0x27
 8000542:	2220      	movs	r2, #32
 8000544:	4619      	mov	r1, r3
 8000546:	f002 fe91 	bl	800326c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <MCP39F511_CalculateChecksum>:
//	//memset (clear tmp buffer)
//}


uint8_t MCP39F511_CalculateChecksum(MCP39F511_t *IC, uint8_t NumberOfBytes)
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	460b      	mov	r3, r1
 800055c:	70fb      	strb	r3, [r7, #3]
	    uint16_t Checksum = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	81fb      	strh	r3, [r7, #14]
	    uint8_t i = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	737b      	strb	r3, [r7, #13]
	    do {
	        Checksum += IC->DataSendBuffer[i];
 8000566:	7b7b      	ldrb	r3, [r7, #13]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	4413      	add	r3, r2
 8000574:	81fb      	strh	r3, [r7, #14]
	        i++;
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	3301      	adds	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
	    } while (i <= NumberOfBytes);
 800057c:	7b7a      	ldrb	r2, [r7, #13]
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	429a      	cmp	r2, r3
 8000582:	d9f0      	bls.n	8000566 <MCP39F511_CalculateChecksum+0x14>
	    Checksum %= 0x0100;
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	81fb      	strh	r3, [r7, #14]
	    return(Checksum);
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	b2db      	uxtb	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <MCP39F511_ReadData>:

void MCP39F511_ReadData(MCP39F511_t *IC, uint16_t StartAddress, uint8_t NumberOfBytes)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	807b      	strh	r3, [r7, #2]
 80005a6:	4613      	mov	r3, r2
 80005a8:	707b      	strb	r3, [r7, #1]
	IC->DataSendBuffer[0] = HEADER_BYTE;				//frame header byte
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	22a5      	movs	r2, #165	; 0xa5
 80005ae:	711a      	strb	r2, [r3, #4]
	IC->DataSendBuffer[1] = 8; 							//number of all bytes in frame
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2208      	movs	r2, #8
 80005b4:	715a      	strb	r2, [r3, #5]
	IC->DataSendBuffer[2] = SET_ADDR_PTR;				//set address pointer do desired data
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2241      	movs	r2, #65	; 0x41
 80005ba:	719a      	strb	r2, [r3, #6]
	IC->DataSendBuffer[3] = (StartAddress >> 8);			//address HIGH
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	71da      	strb	r2, [r3, #7]
	IC->DataSendBuffer[4] = StartAddress;				//address LOW
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	721a      	strb	r2, [r3, #8]
	IC->DataSendBuffer[5] = READ_REGISTER;				//read register command
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	224e      	movs	r2, #78	; 0x4e
 80005d4:	725a      	strb	r2, [r3, #9]
	IC->DataSendBuffer[6] = NumberOfBytes;				//number of bytes to read
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	787a      	ldrb	r2, [r7, #1]
 80005da:	729a      	strb	r2, [r3, #10]
	IC->DataSendBuffer[7] = MCP39F511_CalculateChecksum(IC, 6);	//checksum
 80005dc:	2106      	movs	r1, #6
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffb7 	bl	8000552 <MCP39F511_CalculateChecksum>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	72da      	strb	r2, [r3, #11]
	MCP39F511_SendData(IC,8);								//send function
 80005ec:	2108      	movs	r1, #8
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff8c 	bl	800050c <MCP39F511_SendData>
	MCP39F511_ListenDMA(IC);							//set DMA to listen
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff9c 	bl	8000532 <MCP39F511_ListenDMA>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DMA_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <MX_DMA_Init+0x4c>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200d      	movs	r0, #13
 800062c:	f000 fe77 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000630:	200d      	movs	r0, #13
 8000632:	f000 fe90 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200f      	movs	r0, #15
 800063c:	f000 fe6f 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000640:	200f      	movs	r0, #15
 8000642:	f000 fe88 	bl	8001356 <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f001 fa73 	bl	8001b90 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 fa28 	bl	8000b04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f004 fa4b 	bl	8004b54 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001a0 	.word	0x200001a0
 80006dc:	40028000 	.word	0x40028000
 80006e0:	20000250 	.word	0x20000250
 80006e4:	200000c8 	.word	0x200000c8
 80006e8:	20000028 	.word	0x20000028
 80006ec:	20000168 	.word	0x20000168

080006f0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a55      	ldr	r2, [pc, #340]	; (8000864 <HAL_ETH_MspInit+0x174>)
 800070e:	4293      	cmp	r3, r2
 8000710:	f040 80a4 	bne.w	800085c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
 8000718:	4b53      	ldr	r3, [pc, #332]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a52      	ldr	r2, [pc, #328]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800071e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800072c:	623b      	str	r3, [r7, #32]
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
 8000734:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a4b      	ldr	r2, [pc, #300]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800073a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000748:	61fb      	str	r3, [r7, #28]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	4b45      	ldr	r3, [pc, #276]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a44      	ldr	r2, [pc, #272]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a36      	ldr	r2, [pc, #216]	; (8000868 <HAL_ETH_MspInit+0x178>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <HAL_ETH_MspInit+0x178>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	6313      	str	r3, [r2, #48]	; 0x30
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <HAL_ETH_MspInit+0x178>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d8:	2332      	movs	r3, #50	; 0x32
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e8:	230b      	movs	r3, #11
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	481e      	ldr	r0, [pc, #120]	; (800086c <HAL_ETH_MspInit+0x17c>)
 80007f4:	f001 fcf4 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f8:	2386      	movs	r3, #134	; 0x86
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <HAL_ETH_MspInit+0x180>)
 8000814:	f001 fce4 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_ETH_MspInit+0x184>)
 8000836:	f001 fcd3 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800083a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084c:	230b      	movs	r3, #11
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <HAL_ETH_MspInit+0x188>)
 8000858:	f001 fcc2 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	3738      	adds	r7, #56	; 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40028000 	.word	0x40028000
 8000868:	40023800 	.word	0x40023800
 800086c:	40020800 	.word	0x40020800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020400 	.word	0x40020400
 8000878:	40021800 	.word	0x40021800

0800087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x150>)
 8000942:	f001 fdf9 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x154>)
 800094c:	f001 fdf4 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x158>)
 8000968:	f001 fc3a 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x150>)
 8000986:	f001 fc2b 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009a2:	f001 fc1d 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009ba:	f001 fc11 	bl	80021e0 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fb2e 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f81a 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff ff4a 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 80009e8:	f7ff fe0c 	bl	8000604 <MX_DMA_Init>
  MX_ETH_Init();
 80009ec:	f7ff fe32 	bl	8000654 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 f93a 	bl	8000c68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009f4:	f000 fa70 	bl	8000ed8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80009f8:	f000 f90c 	bl	8000c14 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //Length = sprintf((char*)Message, "Siema");
  //HAL_UART_Transmit_DMA(&huart4, Message, Length);

  MCP39F511_Init(&MCP1, &huart4);
 80009fc:	4904      	ldr	r1, [pc, #16]	; (8000a10 <main+0x38>)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <main+0x3c>)
 8000a00:	f7ff fd76 	bl	80004f0 <MCP39F511_Init>

  MCP39F511_ReadData(&MCP1, VOLTAGE_RMS, 4);
 8000a04:	2204      	movs	r2, #4
 8000a06:	2106      	movs	r1, #6
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <main+0x3c>)
 8000a0a:	f7ff fdc6 	bl	800059a <MCP39F511_ReadData>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x36>
 8000a10:	200002cc 	.word	0x200002cc
 8000a14:	20000258 	.word	0x20000258

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f894 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a8c:	23a8      	movs	r3, #168	; 0xa8
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fe81 	bl	80027a4 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f000 f82c 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2105      	movs	r1, #5
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f8e2 	bl	8002c94 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ad6:	f000 f815 	bl	8000b04 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]

}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fa98 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DMA1_Stream2_IRQHandler+0x10>)
 8000bba:	f000 fd7f 	bl	80016bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200003b4 	.word	0x200003b4

08000bc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Stream4_IRQHandler+0x10>)
 8000bce:	f000 fd75 	bl	80016bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000354 	.word	0x20000354

08000bdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <UART4_IRQHandler+0x10>)
 8000be2:	f002 fba9 	bl	8003338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002cc 	.word	0x200002cc

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_tx;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_UART4_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c4c:	f002 fa42 	bl	80030d4 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c56:	f7ff ff55 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200002cc 	.word	0x200002cc
 8000c64:	40004c00 	.word	0x40004c00

08000c68 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART3_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	f002 fa18 	bl	80030d4 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f7ff ff2b 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000310 	.word	0x20000310
 8000cb8:	40004800 	.word	0x40004800

08000cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a75      	ldr	r2, [pc, #468]	; (8000eb0 <HAL_UART_MspInit+0x1f4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f040 80b1 	bne.w	8000e42 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	4b73      	ldr	r3, [pc, #460]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a72      	ldr	r2, [pc, #456]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b70      	ldr	r3, [pc, #448]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	4b6c      	ldr	r3, [pc, #432]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a6b      	ldr	r2, [pc, #428]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	4b65      	ldr	r3, [pc, #404]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a64      	ldr	r2, [pc, #400]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d44:	2308      	movs	r3, #8
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485a      	ldr	r0, [pc, #360]	; (8000eb8 <HAL_UART_MspInit+0x1fc>)
 8000d50:	f001 fa46 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d66:	2308      	movs	r3, #8
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4852      	ldr	r0, [pc, #328]	; (8000ebc <HAL_UART_MspInit+0x200>)
 8000d72:	f001 fa35 	bl	80021e0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d76:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_UART_MspInit+0x208>)
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d7c:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d82:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d90:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d96:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000db6:	4842      	ldr	r0, [pc, #264]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000db8:	f000 fae8 	bl	800138c <HAL_DMA_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000dc2:	f7ff fe9f 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_UART_MspInit+0x204>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000dd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <HAL_UART_MspInit+0x210>)
 8000dd6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dde:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de0:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e06:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e14:	482c      	ldr	r0, [pc, #176]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e16:	f000 fab9 	bl	800138c <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8000e20:	f7ff fe70 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
 8000e2a:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_UART_MspInit+0x20c>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2034      	movs	r0, #52	; 0x34
 8000e36:	f000 fa72 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e3a:	2034      	movs	r0, #52	; 0x34
 8000e3c:	f000 fa8b 	bl	8001356 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e40:	e031      	b.n	8000ea6 <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <HAL_UART_MspInit+0x214>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d12c      	bne.n	8000ea6 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x1f8>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e96:	2307      	movs	r3, #7
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_UART_MspInit+0x218>)
 8000ea2:	f001 f99d 	bl	80021e0 <HAL_GPIO_Init>
}
 8000ea6:	bf00      	nop
 8000ea8:	3730      	adds	r7, #48	; 0x30
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	20000354 	.word	0x20000354
 8000ec4:	40026070 	.word	0x40026070
 8000ec8:	200003b4 	.word	0x200003b4
 8000ecc:	40026040 	.word	0x40026040
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ee2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1c:	f001 fb25 	bl	800256a <HAL_PCD_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f26:	f7ff fded 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000414 	.word	0x20000414

08000f34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f54:	d13f      	bne.n	8000fd6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f84:	230a      	movs	r3, #10
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <HAL_PCD_MspInit+0xb0>)
 8000f90:	f001 f926 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <HAL_PCD_MspInit+0xb0>)
 8000faa:	f001 f919 	bl	80021e0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_PCD_MspInit+0xac>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff fded 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 fd79 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fcdd 	bl	80009d8 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001020:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800102c:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001034:	20000924 	.word	0x20000924

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f94f 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fd4e 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f967 	bl	8001372 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f92f 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000920 	.word	0x20000920

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000920 	.word	0x20000920

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff feb6 	bl	8001108 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e099      	b.n	80014dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c8:	e00f      	b.n	80013ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ca:	f7ff fe9d 	bl	8001108 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d908      	bls.n	80013ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e078      	b.n	80014dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e8      	bne.n	80013ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_DMA_Init+0x158>)
 8001404:	4013      	ands	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b04      	cmp	r3, #4
 8001442:	d107      	bne.n	8001454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4313      	orrs	r3, r2
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f023 0307 	bic.w	r3, r3, #7
 800146a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	2b04      	cmp	r3, #4
 800147c:	d117      	bne.n	80014ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fb01 	bl	8001a98 <DMA_CheckFifoParam>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014aa:	2301      	movs	r3, #1
 80014ac:	e016      	b.n	80014dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fab8 	bl	8001a2c <DMA_CalcBaseAndBitshift>
 80014bc:	4603      	mov	r3, r0
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	f010803f 	.word	0xf010803f

080014e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_DMA_Start_IT+0x26>
 800150a:	2302      	movs	r3, #2
 800150c:	e040      	b.n	8001590 <HAL_DMA_Start_IT+0xa8>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d12f      	bne.n	8001582 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 fa4a 	bl	80019d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	223f      	movs	r2, #63	; 0x3f
 8001542:	409a      	lsls	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0216 	orr.w	r2, r2, #22
 8001556:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0208 	orr.w	r2, r2, #8
 800156e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e005      	b.n	800158e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015a6:	f7ff fdaf 	bl	8001108 <HAL_GetTick>
 80015aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e052      	b.n	8001670 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0216 	bic.w	r2, r2, #22
 80015d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_DMA_Abort+0x62>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	e013      	b.n	8001644 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161c:	f7ff fd74 	bl	8001108 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b05      	cmp	r3, #5
 8001628:	d90c      	bls.n	8001644 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e015      	b.n	8001670 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e4      	bne.n	800161c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	223f      	movs	r2, #63	; 0x3f
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d004      	beq.n	8001696 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00c      	b.n	80016b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2205      	movs	r2, #5
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016c8:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <HAL_DMA_IRQHandler+0x248>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a8e      	ldr	r2, [pc, #568]	; (8001908 <HAL_DMA_IRQHandler+0x24c>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2208      	movs	r2, #8
 80016e8:	409a      	lsls	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01a      	beq.n	8001728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2208      	movs	r2, #8
 8001716:	409a      	lsls	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d012      	beq.n	800175e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2201      	movs	r2, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2204      	movs	r2, #4
 8001764:	409a      	lsls	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d012      	beq.n	8001794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	2204      	movs	r2, #4
 8001782:	409a      	lsls	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178c:	f043 0204 	orr.w	r2, r3, #4
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	2210      	movs	r2, #16
 800179a:	409a      	lsls	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d043      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d03c      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	2210      	movs	r2, #16
 80017b8:	409a      	lsls	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d024      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
 80017ea:	e01f      	b.n	800182c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e016      	b.n	800182c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0208 	bic.w	r2, r2, #8
 800181a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2220      	movs	r2, #32
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 808f 	beq.w	800195c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8087 	beq.w	800195c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001852:	2220      	movs	r2, #32
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b05      	cmp	r3, #5
 8001864:	d136      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0216 	bic.w	r2, r2, #22
 8001874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_DMA_IRQHandler+0x1da>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0208 	bic.w	r2, r2, #8
 80018a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	223f      	movs	r2, #63	; 0x3f
 80018ac:	409a      	lsls	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d07e      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
        }
        return;
 80018d2:	e079      	b.n	80019c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d031      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e02c      	b.n	800195c <HAL_DMA_IRQHandler+0x2a0>
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e01e      	b.n	800195c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10f      	bne.n	800194c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0210 	bic.w	r2, r2, #16
 800193a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	2b00      	cmp	r3, #0
 8001962:	d032      	beq.n	80019ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d022      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2205      	movs	r2, #5
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3301      	adds	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	429a      	cmp	r2, r3
 8001992:	d307      	bcc.n	80019a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f2      	bne.n	8001988 <HAL_DMA_IRQHandler+0x2cc>
 80019a2:	e000      	b.n	80019a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
 80019c6:	e000      	b.n	80019ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80019c8:	bf00      	nop
    }
  }
}
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d108      	bne.n	8001a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a0e:	e007      	b.n	8001a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	60da      	str	r2, [r3, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <DMA_CalcBaseAndBitshift+0x64>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <DMA_CalcBaseAndBitshift+0x68>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d909      	bls.n	8001a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	1d1a      	adds	r2, r3, #4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a6c:	e007      	b.n	8001a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	aaaaaaab 	.word	0xaaaaaaab
 8001a94:	08004b94 	.word	0x08004b94

08001a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11f      	bne.n	8001af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d856      	bhi.n	8001b66 <DMA_CheckFifoParam+0xce>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <DMA_CheckFifoParam+0x28>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001ae3 	.word	0x08001ae3
 8001ac8:	08001ad1 	.word	0x08001ad1
 8001acc:	08001b67 	.word	0x08001b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d046      	beq.n	8001b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae0:	e043      	b.n	8001b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aea:	d140      	bne.n	8001b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af0:	e03d      	b.n	8001b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afa:	d121      	bne.n	8001b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d837      	bhi.n	8001b72 <DMA_CheckFifoParam+0xda>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <DMA_CheckFifoParam+0x70>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001b1f 	.word	0x08001b1f
 8001b10:	08001b19 	.word	0x08001b19
 8001b14:	08001b31 	.word	0x08001b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b1c:	e030      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d025      	beq.n	8001b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b2e:	e022      	b.n	8001b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b38:	d11f      	bne.n	8001b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b3e:	e01c      	b.n	8001b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d903      	bls.n	8001b4e <DMA_CheckFifoParam+0xb6>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d003      	beq.n	8001b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b4c:	e018      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      break;
 8001b52:	e015      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      break;
 8001b64:	e00b      	b.n	8001b7e <DMA_CheckFifoParam+0xe6>
      break;
 8001b66:	bf00      	nop
 8001b68:	e00a      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e008      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e006      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e004      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e002      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b7a:	bf00      	nop
 8001b7c:	e000      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop

08001b90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06c      	b.n	8001c7c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2223      	movs	r2, #35	; 0x23
 8001bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fd9b 	bl	80006f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_ETH_Init+0xf4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_ETH_Init+0xf4>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_ETH_Init+0xf4>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_ETH_Init+0xf8>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_ETH_Init+0xf8>)
 8001bdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001be0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_ETH_Init+0xf8>)
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <HAL_ETH_Init+0xf8>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_ETH_Init+0xf8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c0c:	f7ff fa7c 	bl	8001108 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c12:	e011      	b.n	8001c38 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c14:	f7ff fa78 	bl	8001108 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c22:	d909      	bls.n	8001c38 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2204      	movs	r2, #4
 8001c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	22e0      	movs	r2, #224	; 0xe0
 8001c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e021      	b.n	8001c7c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e4      	bne.n	8001c14 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f958 	bl	8001f00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9ff 	bl	8002054 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fa55 	bl	8002106 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	461a      	mov	r2, r3
 8001c62:	2100      	movs	r1, #0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f9bd 	bl	8001fe4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2210      	movs	r2, #16
 8001c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800

08001c8c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <ETH_SetMACConfig+0x15c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7c1b      	ldrb	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <ETH_SetMACConfig+0x28>
 8001cae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cb2:	e000      	b.n	8001cb6 <ETH_SetMACConfig+0x2a>
 8001cb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7c5b      	ldrb	r3, [r3, #17]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <ETH_SetMACConfig+0x38>
 8001cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cc2:	e000      	b.n	8001cc6 <ETH_SetMACConfig+0x3a>
 8001cc4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cc6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ccc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7fdb      	ldrb	r3, [r3, #31]
 8001cd2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cd4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	7f92      	ldrb	r2, [r2, #30]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d102      	bne.n	8001cea <ETH_SetMACConfig+0x5e>
 8001ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce8:	e000      	b.n	8001cec <ETH_SetMACConfig+0x60>
 8001cea:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
 8001cf2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d102      	bne.n	8001d14 <ETH_SetMACConfig+0x88>
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	e000      	b.n	8001d16 <ETH_SetMACConfig+0x8a>
 8001d14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	7bdb      	ldrb	r3, [r3, #15]
 8001d1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff f9ea 	bl	8001120 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d62:	4013      	ands	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0xee>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0xf0>
 8001d7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d7c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d8a:	2a01      	cmp	r2, #1
 8001d8c:	d101      	bne.n	8001d92 <ETH_SetMACConfig+0x106>
 8001d8e:	2208      	movs	r2, #8
 8001d90:	e000      	b.n	8001d94 <ETH_SetMACConfig+0x108>
 8001d92:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d94:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d9c:	2a01      	cmp	r2, #1
 8001d9e:	d101      	bne.n	8001da4 <ETH_SetMACConfig+0x118>
 8001da0:	2204      	movs	r2, #4
 8001da2:	e000      	b.n	8001da6 <ETH_SetMACConfig+0x11a>
 8001da4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001da6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001dae:	2a01      	cmp	r2, #1
 8001db0:	d101      	bne.n	8001db6 <ETH_SetMACConfig+0x12a>
 8001db2:	2202      	movs	r2, #2
 8001db4:	e000      	b.n	8001db8 <ETH_SetMACConfig+0x12c>
 8001db6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001db8:	4313      	orrs	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff f9a5 	bl	8001120 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	ff20810f 	.word	0xff20810f

08001dec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <ETH_SetDMAConfig+0x110>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7b1b      	ldrb	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <ETH_SetDMAConfig+0x2c>
 8001e12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e16:	e000      	b.n	8001e1a <ETH_SetDMAConfig+0x2e>
 8001e18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	7b5b      	ldrb	r3, [r3, #13]
 8001e1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	7f52      	ldrb	r2, [r2, #29]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d102      	bne.n	8001e30 <ETH_SetDMAConfig+0x44>
 8001e2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e2e:	e000      	b.n	8001e32 <ETH_SetDMAConfig+0x46>
 8001e30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7b9b      	ldrb	r3, [r3, #14]
 8001e38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7f1b      	ldrb	r3, [r3, #28]
 8001e46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	7f9b      	ldrb	r3, [r3, #30]
 8001e4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	461a      	mov	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f94c 	bl	8001120 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e90:	461a      	mov	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ea0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ea6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eb4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001eb6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ebe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ec4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff f91d 	bl	8001120 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f8de3f23 	.word	0xf8de3f23

08001f00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a6      	sub	sp, #152	; 0x98
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fe86 	bl	8001c8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fac:	2301      	movs	r3, #1
 8001fae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff08 	bl	8001dec <ETH_SetDMAConfig>
}
 8001fdc:	bf00      	nop
 8001fde:	3798      	adds	r7, #152	; 0x98
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3305      	adds	r3, #5
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	3204      	adds	r2, #4
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <ETH_MACAddressConfig+0x68>)
 8002006:	4413      	add	r3, r2
 8002008:	461a      	mov	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3303      	adds	r3, #3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	061a      	lsls	r2, r3, #24
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3302      	adds	r3, #2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3301      	adds	r3, #1
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	4313      	orrs	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <ETH_MACAddressConfig+0x6c>)
 8002036:	4413      	add	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40028040 	.word	0x40028040
 8002050:	40028044 	.word	0x40028044

08002054 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e03e      	b.n	80020e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	3206      	adds	r2, #6
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d80c      	bhi.n	80020c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	e004      	b.n	80020ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d9bd      	bls.n	8002062 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f8:	611a      	str	r2, [r3, #16]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e046      	b.n	80021a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002150:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002158:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	3212      	adds	r2, #18
 800216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d80c      	bhi.n	8002192 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6919      	ldr	r1, [r3, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	e004      	b.n	800219c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d9b5      	bls.n	8002114 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d2:	60da      	str	r2, [r3, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e177      	b.n	80024ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8166 	bne.w	80024e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80c0 	beq.w	80024e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_GPIO_Init+0x324>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_GPIO_Init+0x328>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_GPIO_Init+0x32c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d037      	beq.n	800241e <HAL_GPIO_Init+0x23e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_GPIO_Init+0x330>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d031      	beq.n	800241a <HAL_GPIO_Init+0x23a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_GPIO_Init+0x334>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x236>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_GPIO_Init+0x338>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x232>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_GPIO_Init+0x33c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x22e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HAL_GPIO_Init+0x340>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x22a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x344>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_GPIO_Init+0x348>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_GPIO_Init+0x34c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <HAL_GPIO_Init+0x350>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x21a>
 80023f6:	2309      	movs	r3, #9
 80023f8:	e012      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fa:	230a      	movs	r3, #10
 80023fc:	e010      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fe:	2308      	movs	r3, #8
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002402:	2307      	movs	r3, #7
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x328>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_GPIO_Init+0x354>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a34      	ldr	r2, [pc, #208]	; (8002534 <HAL_GPIO_Init+0x354>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_GPIO_Init+0x354>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_GPIO_Init+0x354>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_GPIO_Init+0x354>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_GPIO_Init+0x354>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_GPIO_Init+0x354>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <HAL_GPIO_Init+0x354>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae84 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40022000 	.word	0x40022000
 8002530:	40022400 	.word	0x40022400
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800256a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256c:	b08f      	sub	sp, #60	; 0x3c
 800256e:	af0a      	add	r7, sp, #40	; 0x28
 8002570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e10f      	b.n	800279c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fccc 	bl	8000f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 f805 	bl	80045ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	687e      	ldr	r6, [r7, #4]
 80025c8:	466d      	mov	r5, sp
 80025ca:	f106 0410 	add.w	r4, r6, #16
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025da:	e885 0003 	stmia.w	r5, {r0, r1}
 80025de:	1d33      	adds	r3, r6, #4
 80025e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f001 ff90 	bl	8004508 <USB_CoreInit>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0d0      	b.n	800279c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fff3 	bl	80045ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e04a      	b.n	80026a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	333d      	adds	r3, #61	; 0x3d
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	b298      	uxth	r0, r3
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3344      	adds	r3, #68	; 0x44
 8002648:	4602      	mov	r2, r0
 800264a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334c      	adds	r3, #76	; 0x4c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3354      	adds	r3, #84	; 0x54
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3af      	bcc.n	800260c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e044      	b.n	800273c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3b5      	bcc.n	80026b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	687e      	ldr	r6, [r7, #4]
 800274e:	466d      	mov	r5, sp
 8002750:	f106 0410 	add.w	r4, r6, #16
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002760:	e885 0003 	stmia.w	r5, {r0, r1}
 8002764:	1d33      	adds	r3, r6, #4
 8002766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	f001 ff8b 	bl	8004684 <USB_DevInit>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e00d      	b.n	800279c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f002 f956 	bl	8004a46 <USB_DevDisconnect>

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e267      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05b      	beq.n	80028ac <HAL_RCC_OscConfig+0x108>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d157      	bne.n	80028ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e242      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x74>
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x98>
 8002822:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6f      	ldr	r2, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6c      	ldr	r2, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 800283c:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b66      	ldr	r3, [pc, #408]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a65      	ldr	r2, [pc, #404]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fc54 	bl	8001108 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fc50 	bl	8001108 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e207      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xc0>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fc40 	bl	8001108 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fc3c 	bl	8001108 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1f3      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0xe8>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1c7      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4937      	ldr	r1, [pc, #220]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fbf5 	bl	8001108 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fbf1 	bl	8001108 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1a8      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4925      	ldr	r1, [pc, #148]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fbd4 	bl	8001108 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fbd0 	bl	8001108 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e187      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x248>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fbb4 	bl	8001108 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fbb0 	bl	8001108 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e167      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x200>
 80029c2:	e01b      	b.n	80029fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x248>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fb9d 	bl	8001108 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00e      	b.n	80029f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fb99 	bl	8001108 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d907      	bls.n	80029f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e150      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ea      	bne.n	80029d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8097 	beq.w	8002b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fb59 	bl	8001108 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe fb55 	bl	8001108 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e10c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x30c>
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002ab0:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a57      	ldr	r2, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b55      	ldr	r3, [pc, #340]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a54      	ldr	r2, [pc, #336]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fb1a 	bl	8001108 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fb16 	bl	8001108 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0cb      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x334>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fb04 	bl	8001108 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fb00 	bl	8001108 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0b5      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a1 	beq.w	8002c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d05c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d141      	bne.n	8002bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fad4 	bl	8001108 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fad0 	bl	8001108 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e087      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe faa9 	bl	8001108 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe faa5 	bl	8001108 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e05c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x416>
 8002bd8:	e054      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fa92 	bl	8001108 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fa8e 	bl	8001108 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e045      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x444>
 8002c06:	e03d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e038      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x4ec>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d121      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d11a      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d111      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cc      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b8      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	494d      	ldr	r1, [pc, #308]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d044      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e067      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4934      	ldr	r1, [pc, #208]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe f9c0 	bl	8001108 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe f9bc 	bl	8001108 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20c      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e032      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4916      	ldr	r1, [pc, #88]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	490e      	ldr	r1, [pc, #56]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f821 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	490a      	ldr	r1, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	5ccb      	ldrb	r3, [r1, r3]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f920 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08004b7c 	.word	0x08004b7c
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000004 	.word	0x20000004

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b094      	sub	sp, #80	; 0x50
 8002e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	2300      	movs	r3, #0
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e78:	4b79      	ldr	r3, [pc, #484]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d00d      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	f200 80e1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e92:	e0db      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e98:	e0db      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e0d8      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	6139      	str	r1, [r7, #16]
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f04:	4659      	mov	r1, fp
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4651      	mov	r1, sl
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4651      	mov	r1, sl
 8002f14:	ebb2 0801 	subs.w	r8, r2, r1
 8002f18:	4659      	mov	r1, fp
 8002f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f32:	4690      	mov	r8, r2
 8002f34:	4699      	mov	r9, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb18 0303 	adds.w	r3, r8, r3
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	eb49 0303 	adc.w	r3, r9, r3
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f52:	4629      	mov	r1, r5
 8002f54:	024b      	lsls	r3, r1, #9
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	024a      	lsls	r2, r1, #9
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f70:	f7fd f93c 	bl	80001ec <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	e058      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	2200      	movs	r2, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	4611      	mov	r1, r2
 8002f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0159      	lsls	r1, r3, #5
 8002fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002faa:	0150      	lsls	r0, r2, #5
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	18e3      	adds	r3, r4, r3
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb45 0303 	adc.w	r3, r5, r3
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003006:	4629      	mov	r1, r5
 8003008:	028b      	lsls	r3, r1, #10
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003010:	4621      	mov	r1, r4
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301a:	2200      	movs	r2, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	61fa      	str	r2, [r7, #28]
 8003020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003024:	f7fd f8e2 	bl	80001ec <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003054:	4618      	mov	r0, r3
 8003056:	3750      	adds	r7, #80	; 0x50
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08004b8c 	.word	0x08004b8c

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b0:	f7ff ffdc 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0b5b      	lsrs	r3, r3, #13
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08004b8c 	.word	0x08004b8c

080030d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e03f      	b.n	8003166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fdde 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 ff81 	bl	8004020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800312c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b20      	cmp	r3, #32
 8003188:	d165      	bne.n	8003256 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_UART_Transmit_DMA+0x26>
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e05e      	b.n	8003258 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_UART_Transmit_DMA+0x38>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e057      	b.n	8003258 <HAL_UART_Transmit_DMA+0xe8>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2221      	movs	r2, #33	; 0x21
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_UART_Transmit_DMA+0xf0>)
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4a21      	ldr	r2, [pc, #132]	; (8003264 <HAL_UART_Transmit_DMA+0xf4>)
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_UART_Transmit_DMA+0xf8>)
 80031e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	2200      	movs	r2, #0
 80031ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3304      	adds	r3, #4
 8003204:	461a      	mov	r2, r3
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	f7fe f96e 	bl	80014e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003214:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3314      	adds	r3, #20
 8003224:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	617b      	str	r3, [r7, #20]
   return(result);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323e:	627a      	str	r2, [r7, #36]	; 0x24
 8003240:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6a39      	ldr	r1, [r7, #32]
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	61fb      	str	r3, [r7, #28]
   return(result);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3730      	adds	r7, #48	; 0x30
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	080038b9 	.word	0x080038b9
 8003264:	08003953 	.word	0x08003953
 8003268:	08003acb 	.word	0x08003acb

0800326c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d152      	bne.n	800332c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e04b      	b.n	800332e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e044      	b.n	800332e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fc51 	bl	8003b60 <UART_Start_Receive_DMA>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80032c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d12c      	bne.n	8003326 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d125      	bne.n	8003320 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	617b      	str	r3, [r7, #20]
   return(result);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f043 0310 	orr.w	r3, r3, #16
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330a:	627a      	str	r2, [r7, #36]	; 0x24
 800330c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6a39      	ldr	r1, [r7, #32]
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	61fb      	str	r3, [r7, #28]
   return(result);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800331e:	e002      	b.n	8003326 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800332a:	e000      	b.n	800332e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3730      	adds	r7, #48	; 0x30
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0ba      	sub	sp, #232	; 0xe8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_UART_IRQHandler+0x66>
 800338a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fd87 	bl	8003eaa <UART_Receive_IT>
      return;
 800339c:	e256      	b.n	800384c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800339e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80de 	beq.w	8003564 <HAL_UART_IRQHandler+0x22c>
 80033a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80d1 	beq.w	8003564 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_UART_IRQHandler+0xae>
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_UART_IRQHandler+0xd2>
 80033f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_UART_IRQHandler+0xf6>
 8003416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d011      	beq.n	800345e <HAL_UART_IRQHandler+0x126>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d105      	bne.n	8003452 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 81ed 	beq.w	8003842 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_UART_IRQHandler+0x14e>
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fd12 	bl	8003eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_UART_IRQHandler+0x17a>
 80034aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04f      	beq.n	8003552 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fc1a 	bl	8003cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d141      	bne.n	800354a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800350a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1d9      	bne.n	80034c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d013      	beq.n	8003542 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	4a7d      	ldr	r2, [pc, #500]	; (8003714 <HAL_UART_IRQHandler+0x3dc>)
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe f8a6 	bl	8001678 <HAL_DMA_Abort_IT>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800353c:	4610      	mov	r0, r2
 800353e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e00e      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9ae 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003548:	e00a      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9aa 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e006      	b.n	8003560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f9a6 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800355e:	e170      	b.n	8003842 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	bf00      	nop
    return;
 8003562:	e16e      	b.n	8003842 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 814a 	bne.w	8003802 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8143 	beq.w	8003802 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 813c 	beq.w	8003802 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	f040 80b4 	bne.w	8003718 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8140 	beq.w	8003846 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f080 8139 	bcs.w	8003846 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e6:	f000 8088 	beq.w	80036fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1d9      	bne.n	80035ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3314      	adds	r3, #20
 800363c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800365a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800365e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800366c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e1      	bne.n	8003636 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800369c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80036de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e3      	bne.n	80036b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd ff4f 	bl	8001598 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003702:	b29b      	uxth	r3, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd f9ee 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003710:	e099      	b.n	8003846 <HAL_UART_IRQHandler+0x50e>
 8003712:	bf00      	nop
 8003714:	08003db3 	.word	0x08003db3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 808b 	beq.w	800384a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8086 	beq.w	800384a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003762:	647a      	str	r2, [r7, #68]	; 0x44
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e3      	bne.n	800373e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	623b      	str	r3, [r7, #32]
   return(result);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800379a:	633a      	str	r2, [r7, #48]	; 0x30
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd f976 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003800:	e023      	b.n	800384a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_UART_IRQHandler+0x4ea>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fadd 	bl	8003dda <UART_Transmit_IT>
    return;
 8003820:	e014      	b.n	800384c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <HAL_UART_IRQHandler+0x514>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb1d 	bl	8003e7a <UART_EndTransmit_IT>
    return;
 8003840:	e004      	b.n	800384c <HAL_UART_IRQHandler+0x514>
    return;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <HAL_UART_IRQHandler+0x514>
      return;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HAL_UART_IRQHandler+0x514>
      return;
 800384a:	bf00      	nop
  }
}
 800384c:	37e8      	adds	r7, #232	; 0xe8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b090      	sub	sp, #64	; 0x40
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d137      	bne.n	8003944 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3314      	adds	r3, #20
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	623b      	str	r3, [r7, #32]
   return(result);
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038fa:	633a      	str	r2, [r7, #48]	; 0x30
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	60fb      	str	r3, [r7, #12]
   return(result);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392e:	61fa      	str	r2, [r7, #28]
 8003930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	69b9      	ldr	r1, [r7, #24]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	617b      	str	r3, [r7, #20]
   return(result);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003942:	e002      	b.n	800394a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003944:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003946:	f7ff ff85 	bl	8003854 <HAL_UART_TxCpltCallback>
}
 800394a:	bf00      	nop
 800394c:	3740      	adds	r7, #64	; 0x40
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff ff81 	bl	8003868 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b09c      	sub	sp, #112	; 0x70
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d172      	bne.n	8003a70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	2200      	movs	r2, #0
 800398e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80039b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	667b      	str	r3, [r7, #100]	; 0x64
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039e4:	647a      	str	r2, [r7, #68]	; 0x44
 80039e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	623b      	str	r3, [r7, #32]
   return(result);
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a18:	633a      	str	r2, [r7, #48]	; 0x30
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d119      	bne.n	8003a70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a5c:	61fa      	str	r2, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e5      	bne.n	8003a3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a80:	f7fd f834 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a84:	e002      	b.n	8003a8c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a88:	f7ff fef8 	bl	800387c <HAL_UART_RxCpltCallback>
}
 8003a8c:	bf00      	nop
 8003a8e:	3770      	adds	r7, #112	; 0x70
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7fd f819 	bl	8000aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003aba:	e002      	b.n	8003ac2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff fee7 	bl	8003890 <HAL_UART_RxHalfCpltCallback>
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b21      	cmp	r3, #33	; 0x21
 8003afc:	d108      	bne.n	8003b10 <UART_DMAError+0x46>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 f8c6 	bl	8003c9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b22      	cmp	r3, #34	; 0x22
 8003b30:	d108      	bne.n	8003b44 <UART_DMAError+0x7a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	f000 f8d4 	bl	8003cec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b50:	68b8      	ldr	r0, [r7, #8]
 8003b52:	f7ff fea7 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b098      	sub	sp, #96	; 0x60
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4a40      	ldr	r2, [pc, #256]	; (8003c90 <UART_Start_Receive_DMA+0x130>)
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4a3f      	ldr	r2, [pc, #252]	; (8003c94 <UART_Start_Receive_DMA+0x134>)
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4a3e      	ldr	r2, [pc, #248]	; (8003c98 <UART_Start_Receive_DMA+0x138>)
 8003b9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	f7fd fc92 	bl	80014e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d019      	beq.n	8003c1e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	657b      	str	r3, [r7, #84]	; 0x54
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3314      	adds	r3, #20
 8003c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	617b      	str	r3, [r7, #20]
   return(result);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c68:	653b      	str	r3, [r7, #80]	; 0x50
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c72:	627a      	str	r2, [r7, #36]	; 0x24
 8003c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6a39      	ldr	r1, [r7, #32]
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3760      	adds	r7, #96	; 0x60
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0800396f 	.word	0x0800396f
 8003c94:	08003a95 	.word	0x08003a95
 8003c98:	08003acb 	.word	0x08003acb

08003c9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	61ba      	str	r2, [r7, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003ce0:	bf00      	nop
 8003ce2:	3724      	adds	r7, #36	; 0x24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b095      	sub	sp, #84	; 0x54
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d14:	643a      	str	r2, [r7, #64]	; 0x40
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d119      	bne.n	8003d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f023 0310 	bic.w	r3, r3, #16
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d84:	61ba      	str	r2, [r7, #24]
 8003d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6979      	ldr	r1, [r7, #20]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	613b      	str	r3, [r7, #16]
   return(result);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003da6:	bf00      	nop
 8003da8:	3754      	adds	r7, #84	; 0x54
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fd69 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b21      	cmp	r3, #33	; 0x21
 8003dec:	d13e      	bne.n	8003e6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d114      	bne.n	8003e22 <UART_Transmit_IT+0x48>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d110      	bne.n	8003e22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	1c9a      	adds	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]
 8003e20:	e008      	b.n	8003e34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6211      	str	r1, [r2, #32]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4619      	mov	r1, r3
 8003e42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fcda 	bl	8003854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b08c      	sub	sp, #48	; 0x30
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b22      	cmp	r3, #34	; 0x22
 8003ebc:	f040 80ab 	bne.w	8004016 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d117      	bne.n	8003efa <UART_Receive_IT+0x50>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c9a      	adds	r2, r3, #2
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e026      	b.n	8003f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0c:	d007      	beq.n	8003f1e <UART_Receive_IT+0x74>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <UART_Receive_IT+0x82>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e008      	b.n	8003f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4619      	mov	r1, r3
 8003f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d15a      	bne.n	8004012 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0220 	bic.w	r2, r2, #32
 8003f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d135      	bne.n	8004008 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	623a      	str	r2, [r7, #32]
 8003fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d10a      	bne.n	8003ffa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fc fd73 	bl	8000aec <HAL_UARTEx_RxEventCallback>
 8004006:	e002      	b.n	800400e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fc37 	bl	800387c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e002      	b.n	8004018 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	; 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b0c0      	sub	sp, #256	; 0x100
 8004026:	af00      	add	r7, sp, #0
 8004028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	ea40 0301 	orr.w	r3, r0, r1
 8004048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004078:	f021 010c 	bic.w	r1, r1, #12
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004086:	430b      	orrs	r3, r1
 8004088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	6999      	ldr	r1, [r3, #24]
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	ea40 0301 	orr.w	r3, r0, r1
 80040a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8f      	ldr	r3, [pc, #572]	; (80042ec <UART_SetConfig+0x2cc>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d005      	beq.n	80040c0 <UART_SetConfig+0xa0>
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8d      	ldr	r3, [pc, #564]	; (80042f0 <UART_SetConfig+0x2d0>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe fff4 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 80040c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c8:	e003      	b.n	80040d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ca:	f7fe ffdb 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80040ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040dc:	f040 810c 	bne.w	80042f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	1891      	adds	r1, r2, r2
 80040f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040fa:	415b      	adcs	r3, r3
 80040fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004102:	4621      	mov	r1, r4
 8004104:	eb12 0801 	adds.w	r8, r2, r1
 8004108:	4629      	mov	r1, r5
 800410a:	eb43 0901 	adc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004130:	462b      	mov	r3, r5
 8004132:	eb49 0303 	adc.w	r3, r9, r3
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800414a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800414e:	460b      	mov	r3, r1
 8004150:	18db      	adds	r3, r3, r3
 8004152:	653b      	str	r3, [r7, #80]	; 0x50
 8004154:	4613      	mov	r3, r2
 8004156:	eb42 0303 	adc.w	r3, r2, r3
 800415a:	657b      	str	r3, [r7, #84]	; 0x54
 800415c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004164:	f7fc f842 	bl	80001ec <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <UART_SetConfig+0x2d4>)
 800416e:	fba3 2302 	umull	r2, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	011c      	lsls	r4, r3, #4
 8004176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	1891      	adds	r1, r2, r2
 800418e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004190:	415b      	adcs	r3, r3
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004198:	4641      	mov	r1, r8
 800419a:	eb12 0a01 	adds.w	sl, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb43 0b01 	adc.w	fp, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b8:	4692      	mov	sl, r2
 80041ba:	469b      	mov	fp, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	eb1a 0303 	adds.w	r3, sl, r3
 80041c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041c6:	464b      	mov	r3, r9
 80041c8:	eb4b 0303 	adc.w	r3, fp, r3
 80041cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041e4:	460b      	mov	r3, r1
 80041e6:	18db      	adds	r3, r3, r3
 80041e8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ea:	4613      	mov	r3, r2
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
 80041f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041fa:	f7fb fff7 	bl	80001ec <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4611      	mov	r1, r2
 8004204:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <UART_SetConfig+0x2d4>)
 8004206:	fba3 2301 	umull	r2, r3, r3, r1
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2264      	movs	r2, #100	; 0x64
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	1acb      	subs	r3, r1, r3
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <UART_SetConfig+0x2d4>)
 800421c:	fba3 2302 	umull	r2, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004228:	441c      	add	r4, r3
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	63b9      	str	r1, [r7, #56]	; 0x38
 8004244:	415b      	adcs	r3, r3
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6339      	str	r1, [r7, #48]	; 0x30
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800429c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042a0:	460b      	mov	r3, r1
 80042a2:	18db      	adds	r3, r3, r3
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a6:	4613      	mov	r3, r2
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042b6:	f7fb ff99 	bl	80001ec <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <UART_SetConfig+0x2d4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <UART_SetConfig+0x2d4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 0207 	and.w	r2, r3, #7
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4422      	add	r2, r4
 80042e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e8:	e105      	b.n	80044f6 <UART_SetConfig+0x4d6>
 80042ea:	bf00      	nop
 80042ec:	40011000 	.word	0x40011000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800430a:	4642      	mov	r2, r8
 800430c:	464b      	mov	r3, r9
 800430e:	1891      	adds	r1, r2, r2
 8004310:	6239      	str	r1, [r7, #32]
 8004312:	415b      	adcs	r3, r3
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431a:	4641      	mov	r1, r8
 800431c:	1854      	adds	r4, r2, r1
 800431e:	4649      	mov	r1, r9
 8004320:	eb43 0501 	adc.w	r5, r3, r1
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004340:	464b      	mov	r3, r9
 8004342:	eb45 0303 	adc.w	r3, r5, r3
 8004346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004366:	4629      	mov	r1, r5
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004370:	4621      	mov	r1, r4
 8004372:	008a      	lsls	r2, r1, #2
 8004374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004378:	f7fb ff38 	bl	80001ec <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4b60      	ldr	r3, [pc, #384]	; (8004504 <UART_SetConfig+0x4e4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	011c      	lsls	r4, r3, #4
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	61b9      	str	r1, [r7, #24]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6139      	str	r1, [r7, #16]
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004404:	4649      	mov	r1, r9
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440e:	4641      	mov	r1, r8
 8004410:	008a      	lsls	r2, r1, #2
 8004412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004416:	f7fb fee9 	bl	80001ec <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <UART_SetConfig+0x4e4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	; 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	3332      	adds	r3, #50	; 0x32
 8004432:	4a34      	ldr	r2, [pc, #208]	; (8004504 <UART_SetConfig+0x4e4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443e:	441c      	add	r4, r3
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	673b      	str	r3, [r7, #112]	; 0x70
 8004448:	677a      	str	r2, [r7, #116]	; 0x74
 800444a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800444e:	4642      	mov	r2, r8
 8004450:	464b      	mov	r3, r9
 8004452:	1891      	adds	r1, r2, r2
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	415b      	adcs	r3, r3
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800445e:	4641      	mov	r1, r8
 8004460:	1851      	adds	r1, r2, r1
 8004462:	6039      	str	r1, [r7, #0]
 8004464:	4649      	mov	r1, r9
 8004466:	414b      	adcs	r3, r1
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004476:	4659      	mov	r1, fp
 8004478:	00cb      	lsls	r3, r1, #3
 800447a:	4651      	mov	r1, sl
 800447c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004480:	4651      	mov	r1, sl
 8004482:	00ca      	lsls	r2, r1, #3
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	4603      	mov	r3, r0
 800448a:	4642      	mov	r2, r8
 800448c:	189b      	adds	r3, r3, r2
 800448e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004490:	464b      	mov	r3, r9
 8004492:	460a      	mov	r2, r1
 8004494:	eb42 0303 	adc.w	r3, r2, r3
 8004498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	663b      	str	r3, [r7, #96]	; 0x60
 80044a4:	667a      	str	r2, [r7, #100]	; 0x64
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044b2:	4649      	mov	r1, r9
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	4641      	mov	r1, r8
 80044b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044bc:	4641      	mov	r1, r8
 80044be:	008a      	lsls	r2, r1, #2
 80044c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c4:	f7fb fe92 	bl	80001ec <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <UART_SetConfig+0x4e4>)
 80044ce:	fba3 1302 	umull	r1, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2164      	movs	r1, #100	; 0x64
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <UART_SetConfig+0x4e4>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 020f 	and.w	r2, r3, #15
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4422      	add	r2, r4
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044fc:	46bd      	mov	sp, r7
 80044fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004502:	bf00      	nop
 8004504:	51eb851f 	.word	0x51eb851f

08004508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004508:	b084      	sub	sp, #16
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	f107 001c 	add.w	r0, r7, #28
 8004516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	d122      	bne.n	8004566 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 faa2 	bl	8004aa4 <USB_CoreReset>
 8004560:	4603      	mov	r3, r0
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e01a      	b.n	800459c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa96 	bl	8004aa4 <USB_CoreReset>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
 800458e:	e005      	b.n	800459c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10b      	bne.n	80045ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f043 0206 	orr.w	r2, r3, #6
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c6:	b004      	add	sp, #16
 80045c8:	4770      	bx	lr

080045ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d115      	bne.n	800463a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800461a:	2001      	movs	r0, #1
 800461c:	f7fc fd80 	bl	8001120 <HAL_Delay>
      ms++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa2e 	bl	8004a88 <USB_GetMode>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d01e      	beq.n	8004670 <USB_SetCurrentMode+0x84>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b31      	cmp	r3, #49	; 0x31
 8004636:	d9f0      	bls.n	800461a <USB_SetCurrentMode+0x2e>
 8004638:	e01a      	b.n	8004670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d115      	bne.n	800466c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800464c:	2001      	movs	r0, #1
 800464e:	f7fc fd67 	bl	8001120 <HAL_Delay>
      ms++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa15 	bl	8004a88 <USB_GetMode>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <USB_SetCurrentMode+0x84>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b31      	cmp	r3, #49	; 0x31
 8004668:	d9f0      	bls.n	800464c <USB_SetCurrentMode+0x60>
 800466a:	e001      	b.n	8004670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e005      	b.n	800467c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b32      	cmp	r3, #50	; 0x32
 8004674:	d101      	bne.n	800467a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004684:	b084      	sub	sp, #16
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e009      	b.n	80046b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3340      	adds	r3, #64	; 0x40
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3301      	adds	r3, #1
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b0e      	cmp	r3, #14
 80046bc:	d9f2      	bls.n	80046a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11c      	bne.n	80046fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
 80046fc:	e00b      	b.n	8004716 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800471c:	461a      	mov	r2, r3
 800471e:	2300      	movs	r3, #0
 8004720:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	4619      	mov	r1, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	461a      	mov	r2, r3
 8004732:	680b      	ldr	r3, [r1, #0]
 8004734:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10c      	bne.n	8004756 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004742:	2100      	movs	r1, #0
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f965 	bl	8004a14 <USB_SetDevSpeed>
 800474a:	e008      	b.n	800475e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800474c:	2101      	movs	r1, #1
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f960 	bl	8004a14 <USB_SetDevSpeed>
 8004754:	e003      	b.n	800475e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004756:	2103      	movs	r1, #3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f95b 	bl	8004a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800475e:	2110      	movs	r1, #16
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8f3 	bl	800494c <USB_FlushTxFifo>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f91f 	bl	80049b4 <USB_FlushRxFifo>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	461a      	mov	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e043      	b.n	8004832 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c0:	d118      	bne.n	80047f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e013      	b.n	8004806 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e008      	b.n	8004806 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800482a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3b7      	bcc.n	80047aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e043      	b.n	80048c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004856:	d118      	bne.n	800488a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e013      	b.n	800489c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e008      	b.n	800489c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	461a      	mov	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3301      	adds	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3b7      	bcc.n	8004840 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f043 0210 	orr.w	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <USB_DevInit+0x2c4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004944:	b004      	add	sp, #16
 8004946:	4770      	bx	lr
 8004948:	803c3800 	.word	0x803c3800

0800494c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <USB_FlushTxFifo+0x64>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e01b      	b.n	80049a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	daf2      	bge.n	800495a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	019b      	lsls	r3, r3, #6
 800497c:	f043 0220 	orr.w	r2, r3, #32
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <USB_FlushTxFifo+0x64>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e006      	b.n	80049a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d0f0      	beq.n	8004984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	00030d40 	.word	0x00030d40

080049b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <USB_FlushRxFifo+0x5c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e018      	b.n	8004a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	daf2      	bge.n	80049c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2210      	movs	r2, #16
 80049e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <USB_FlushRxFifo+0x5c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e006      	b.n	8004a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d0f0      	beq.n	80049e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	00030d40 	.word	0x00030d40

08004a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a60:	f023 0303 	bic.w	r3, r3, #3
 8004a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0301 	and.w	r3, r3, #1
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <USB_CoreReset+0x64>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e01b      	b.n	8004afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	daf2      	bge.n	8004ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <USB_CoreReset+0x64>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d0f0      	beq.n	8004ada <USB_CoreReset+0x36>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4d0d      	ldr	r5, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2600      	movs	r6, #0
 8004b18:	42a6      	cmp	r6, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4d0b      	ldr	r5, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f820 	bl	8004b64 <_init>
 8004b24:	1b64      	subs	r4, r4, r5
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2600      	movs	r6, #0
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b34:	4798      	blx	r3
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3e:	4798      	blx	r3
 8004b40:	3601      	adds	r6, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004ba4 	.word	0x08004ba4
 8004b48:	08004ba4 	.word	0x08004ba4
 8004b4c:	08004ba4 	.word	0x08004ba4
 8004b50:	08004ba8 	.word	0x08004ba8

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
