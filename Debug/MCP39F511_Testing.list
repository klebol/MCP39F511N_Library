
MCP39F511_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000938  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000944  20000944  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000108b1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aab  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a0f  00000000  00000000  00034110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000251f4  00000000  00000000  00034b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011a84  00000000  00000000  00059d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daa87  00000000  00000000  0006b797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003588  00000000  00000000  00146220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001497a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800538c 	.word	0x0800538c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800538c 	.word	0x0800538c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x30>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <MX_DMA_Init+0x30>)
 80004f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_DMA_Init+0x30>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ETH_Init+0x84>)
 8000522:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <MX_ETH_Init+0x88>)
 8000524:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_ETH_Init+0x8c>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_ETH_Init+0x8c>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_ETH_Init+0x8c>)
 8000534:	22e1      	movs	r2, #225	; 0xe1
 8000536:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_ETH_Init+0x8c>)
 800053a:	2200      	movs	r2, #0
 800053c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ETH_Init+0x8c>)
 8000540:	2200      	movs	r2, #0
 8000542:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_ETH_Init+0x8c>)
 8000546:	2200      	movs	r2, #0
 8000548:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ETH_Init+0x84>)
 800054c:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <MX_ETH_Init+0x8c>)
 800054e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_ETH_Init+0x84>)
 8000552:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000556:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ETH_Init+0x84>)
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <MX_ETH_Init+0x90>)
 800055c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_ETH_Init+0x84>)
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <MX_ETH_Init+0x94>)
 8000562:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_ETH_Init+0x84>)
 8000566:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800056a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <MX_ETH_Init+0x84>)
 800056e:	f001 feff 	bl	8002370 <HAL_ETH_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 fa51 	bl	8000a1e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800057c:	2238      	movs	r2, #56	; 0x38
 800057e:	2100      	movs	r1, #0
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <MX_ETH_Init+0x98>)
 8000582:	f004 fed7 	bl	8005334 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_ETH_Init+0x98>)
 8000588:	2221      	movs	r2, #33	; 0x21
 800058a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_ETH_Init+0x98>)
 800058e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000592:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_ETH_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200001a0 	.word	0x200001a0
 80005a4:	40028000 	.word	0x40028000
 80005a8:	20000250 	.word	0x20000250
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	20000028 	.word	0x20000028
 80005b4:	20000168 	.word	0x20000168

080005b8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a55      	ldr	r2, [pc, #340]	; (800072c <HAL_ETH_MspInit+0x174>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	f040 80a4 	bne.w	8000724 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <HAL_ETH_MspInit+0x178>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <HAL_ETH_MspInit+0x178>)
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
 80005ec:	4b50      	ldr	r3, [pc, #320]	; (8000730 <HAL_ETH_MspInit+0x178>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005f4:	623b      	str	r3, [r7, #32]
 80005f6:	6a3b      	ldr	r3, [r7, #32]
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	4b4c      	ldr	r3, [pc, #304]	; (8000730 <HAL_ETH_MspInit+0x178>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4b      	ldr	r2, [pc, #300]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b49      	ldr	r3, [pc, #292]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000610:	61fb      	str	r3, [r7, #28]
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	4b45      	ldr	r3, [pc, #276]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a44      	ldr	r2, [pc, #272]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800061e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
 8000624:	4b42      	ldr	r3, [pc, #264]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a36      	ldr	r2, [pc, #216]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
 800065c:	4b34      	ldr	r3, [pc, #208]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a2f      	ldr	r2, [pc, #188]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a28      	ldr	r2, [pc, #160]	; (8000730 <HAL_ETH_MspInit+0x178>)
 800068e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <HAL_ETH_MspInit+0x178>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a0:	2332      	movs	r3, #50	; 0x32
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b0:	230b      	movs	r3, #11
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <HAL_ETH_MspInit+0x17c>)
 80006bc:	f002 f980 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c0:	2386      	movs	r3, #134	; 0x86
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <HAL_ETH_MspInit+0x180>)
 80006dc:	f002 f970 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f2:	230b      	movs	r3, #11
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	480f      	ldr	r0, [pc, #60]	; (800073c <HAL_ETH_MspInit+0x184>)
 80006fe:	f002 f95f 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000702:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <HAL_ETH_MspInit+0x188>)
 8000720:	f002 f94e 	bl	80029c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3738      	adds	r7, #56	; 0x38
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40028000 	.word	0x40028000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020800 	.word	0x40020800
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40021800 	.word	0x40021800

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4b      	ldr	r2, [pc, #300]	; (8000890 <MX_GPIO_Init+0x14c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a44      	ldr	r2, [pc, #272]	; (8000890 <MX_GPIO_Init+0x14c>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <MX_GPIO_Init+0x14c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a36      	ldr	r2, [pc, #216]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	; 0x4081
 8000808:	4822      	ldr	r0, [pc, #136]	; (8000894 <MX_GPIO_Init+0x150>)
 800080a:	f002 fa85 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_GPIO_Init+0x154>)
 8000814:	f002 fa80 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x158>)
 8000830:	f002 f8c6 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000834:	f244 0381 	movw	r3, #16513	; 0x4081
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_GPIO_Init+0x150>)
 800084e:	f002 f8b7 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0x154>)
 800086a:	f002 f8a9 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x154>)
 8000882:	f002 f89d 	bl	80029c0 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40021800 	.word	0x40021800
 800089c:	40020800 	.word	0x40020800

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 ffba 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f81e 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f7ff ff4a 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b0:	f7ff fe1a 	bl	80004e8 <MX_DMA_Init>
  MX_ETH_Init();
 80008b4:	f7ff fe32 	bl	800051c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008b8:	f000 fdf0 	bl	800149c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008bc:	f000 fefc 	bl	80016b8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80008c0:	f000 fdc2 	bl	8001448 <MX_UART4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008c4:	f000 f87a 	bl	80009bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  PowerMeasurement_Init(&huart4);  	//init for IC
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <main+0x40>)
 80008ca:	f000 fc4b 	bl	8001164 <PowerMeasurement_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  PowerMeasurement_Process(&Parameters);
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <main+0x44>)
 80008d0:	f000 fc56 	bl	8001180 <PowerMeasurement_Process>
	  HAL_Delay(1000);
 80008d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d8:	f001 f812 	bl	8001900 <HAL_Delay>
	  PowerMeasurement_Process(&Parameters);
 80008dc:	e7f7      	b.n	80008ce <main+0x2e>
 80008de:	bf00      	nop
 80008e0:	200002ec 	.word	0x200002ec
 80008e4:	20000258 	.word	0x20000258

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	; 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fd1c 	bl	8005334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <SystemClock_Config+0xcc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <SystemClock_Config+0xd0>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000948:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000958:	2304      	movs	r3, #4
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800095c:	23a8      	movs	r3, #168	; 0xa8
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fb2d 	bl	8002fcc <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000978:	f000 f851 	bl	8000a1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fd8e 	bl	80034bc <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a6:	f000 f83a 	bl	8000a1e <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	200d      	movs	r0, #13
 80009c6:	f001 f89a 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009ca:	200d      	movs	r0, #13
 80009cc:	f001 f8b3 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	200f      	movs	r0, #15
 80009d6:	f001 f892 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009da:	200f      	movs	r0, #15
 80009dc:	f001 f8ab 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2034      	movs	r0, #52	; 0x34
 80009e6:	f001 f88a 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009ea:	2034      	movs	r0, #52	; 0x34
 80009ec:	f001 f8a3 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2028      	movs	r0, #40	; 0x28
 80009f6:	f001 f882 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f001 f89b 	bl	8001b36 <HAL_NVIC_EnableIRQ>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	//Callback from UART for MCP communicaiton
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
	PowerMeasurement_RX_Callback(huart);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 fc79 	bl	8001308 <PowerMeasurement_RX_Callback>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a22:	b672      	cpsid	i
}
 8000a24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <Error_Handler+0x8>

08000a28 <PowerMonitor_Init>:
//
//Init
//

void PowerMonitor_Init(PowerMonitor_t *IC, UART_HandleTypeDef *huart)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	IC->UART = huart; //define mcp's uart
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <PowerMonitor_SendData>:
//
//Basic read - write functions (with DMA)
//

PowerMonitor_Status_t PowerMonitor_SendData(PowerMonitor_t *IC, uint8_t *Data, uint8_t Size)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	71fb      	strb	r3, [r7, #7]
	return HAL_UART_Transmit_DMA(IC->UART, Data, Size);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	b292      	uxth	r2, r2
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 ff9b 	bl	8003998 <HAL_UART_Transmit_DMA>
 8000a62:	4603      	mov	r3, r0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <PowerMonitor_ListenDMA>:

PowerMonitor_Status_t PowerMonitor_ListenDMA(PowerMonitor_t *IC, uint8_t *Destination)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	return HAL_UARTEx_ReceiveToIdle_DMA(IC -> UART, Destination, 35);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2223      	movs	r2, #35	; 0x23
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f808 	bl	8003a94 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <PowerMonitor_CalculateChecksum>:
//
//Checksum calculation
//

uint8_t PowerMonitor_CalculateChecksum(uint8_t *FrameForCalculate, uint8_t NumberOfBytes)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
	    uint16_t Checksum = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	81fb      	strh	r3, [r7, #14]
	    uint8_t i = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	737b      	strb	r3, [r7, #13]
	    uint8_t *ByteToAdd = FrameForCalculate;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60bb      	str	r3, [r7, #8]
	    do {
	        Checksum += *(ByteToAdd++);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	81fb      	strh	r3, [r7, #14]
	        i++;
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	737b      	strb	r3, [r7, #13]
	    } while (i <= NumberOfBytes);
 8000abc:	7b7a      	ldrb	r2, [r7, #13]
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d9f0      	bls.n	8000aa6 <PowerMonitor_CalculateChecksum+0x18>
	    Checksum %= 0x0100;
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	81fb      	strh	r3, [r7, #14]
	    return(Checksum);
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PowerMonitor_ReadData>:
//
//Read - write with full frame generation
//

PowerMonitor_Status_t PowerMonitor_ReadData(PowerMonitor_t *IC, uint8_t *Destination, uint16_t StartAddress, uint8_t NumberOfBytes)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	460b      	mov	r3, r1
 8000aea:	80fb      	strh	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	717b      	strb	r3, [r7, #5]
	uint8_t Status = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	75fb      	strb	r3, [r7, #23]
	IC->SendBuffer[0] = HEADER_BYTE;										//frame header byte
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	22a5      	movs	r2, #165	; 0xa5
 8000af8:	711a      	strb	r2, [r3, #4]
	IC->SendBuffer[1] = 8; 													//number of all bytes in frame
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2208      	movs	r2, #8
 8000afe:	715a      	strb	r2, [r3, #5]
	IC->SendBuffer[2] = SET_ADDR_PTR;										//set address pointer do desired data
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2241      	movs	r2, #65	; 0x41
 8000b04:	719a      	strb	r2, [r3, #6]
	IC->SendBuffer[3] = (StartAddress >> 8);								//address HIGH
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	71da      	strb	r2, [r3, #7]
	IC->SendBuffer[4] = StartAddress;										//address LOW
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	721a      	strb	r2, [r3, #8]
	IC->SendBuffer[5] = READ_REGISTER;										//read register command
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	224e      	movs	r2, #78	; 0x4e
 8000b1e:	725a      	strb	r2, [r3, #9]
	IC->SendBuffer[6] = NumberOfBytes;										//number of bytes to read
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	797a      	ldrb	r2, [r7, #5]
 8000b24:	729a      	strb	r2, [r3, #10]
	IC->SendBuffer[7] = PowerMonitor_CalculateChecksum(IC->SendBuffer, 7);	//checksum
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2107      	movs	r1, #7
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffae 	bl	8000a8e <PowerMonitor_CalculateChecksum>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	72da      	strb	r2, [r3, #11]
	Status = PowerMonitor_SendData(IC, IC->SendBuffer, 8);					//send function
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff ff7e 	bl	8000a44 <PowerMonitor_SendData>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	75fb      	strb	r3, [r7, #23]
	Status = PowerMonitor_ListenDMA(IC, Destination);						//set DMA to listen
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff ff8c 	bl	8000a6c <PowerMonitor_ListenDMA>
 8000b54:	4603      	mov	r3, r0
 8000b56:	75fb      	strb	r3, [r7, #23]
	return Status;
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <PowerMonitor_ParseBasics>:
//
//Parse functions
//

void PowerMonitor_ParseBasics(PowerMonitor_t *IC, uint8_t *Data)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	uint32_t Tmp;
	uint8_t *DataPointer = Data;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
	//Get Voltage
	IC->VoltageRMS =  (DataPointer[0] | (DataPointer[1] << 8)) / CALC_VOLTAGE_DIVIDER;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	4a41      	ldr	r2, [pc, #260]	; (8000c88 <PowerMonitor_ParseBasics+0x124>)
 8000b84:	fb82 1203 	smull	r1, r2, r2, r3
 8000b88:	1092      	asrs	r2, r2, #2
 8000b8a:	17db      	asrs	r3, r3, #31
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	//Get Frequency
	Tmp = DataPointer[2] | (DataPointer[3] << 8);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
	IC->LineFrequency = (float)Tmp / CALC_FREQUENCY_DIVIDER;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000c8c <PowerMonitor_ParseBasics+0x128>
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	//Get Power Factor 1
	IC->Channel1.PowerFactor =  DataPointer[4] | (DataPointer[5] << 8);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3305      	adds	r3, #5
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	//Get Power Factor 2
	IC->Channel2.PowerFactor =  DataPointer[6] | (DataPointer[7] << 8);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3306      	adds	r3, #6
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3307      	adds	r3, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//Get Current CH1
	//IC->Channel1.CurrentRMS = (DataPointer[8] | (DataPointer[9] << 8) | (DataPointer[10] << 16) | (DataPointer[11] << 24) ) / CALC_CURRENT_DIVIDER;
	Tmp = (DataPointer[8] | (DataPointer[9] << 8) | (DataPointer[10] << 16) | (DataPointer[11] << 24) );
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3309      	adds	r3, #9
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	330a      	adds	r3, #10
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	041b      	lsls	r3, r3, #16
 8000c14:	431a      	orrs	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	330b      	adds	r3, #11
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	061b      	lsls	r3, r3, #24
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
	IC->Channel1.CurrentRMS = (float)Tmp / CALC_CURRENT_DIVIDER;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c2c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000c90 <PowerMonitor_ParseBasics+0x12c>
 8000c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	//Get Current CH2
	//IC->Channel2.CurrentRMS = (DataPointer[12] | (DataPointer[13] << 8) | (DataPointer[14] << 16) | (DataPointer[15] << 24) ) / CALC_CURRENT_DIVIDER;
	Tmp = (DataPointer[12] | (DataPointer[13] << 8) | (DataPointer[14] << 16) | (DataPointer[15] << 24) );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	330d      	adds	r3, #13
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	330e      	adds	r3, #14
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	431a      	orrs	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	330f      	adds	r3, #15
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	061b      	lsls	r3, r3, #24
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]
	IC->Channel2.CurrentRMS = (float)Tmp / CALC_CURRENT_DIVIDER;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c6c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c90 <PowerMonitor_ParseBasics+0x12c>
 8000c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	66666667 	.word	0x66666667
 8000c8c:	447a0000 	.word	0x447a0000
 8000c90:	461c4000 	.word	0x461c4000

08000c94 <PowerMonitor_ParsePowers>:

void PowerMonitor_ParsePowers(PowerMonitor_t *IC, uint8_t *Data)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	uint8_t *DataPointer = Data;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
	//Get Active Power 1
	IC->Channel1.ActivePower = (DataPointer[0] | (DataPointer[1] << 8) | (DataPointer[2] << 16) | (DataPointer[3] << 24) ) / CALC_POWER_DIVIDER;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	041b      	lsls	r3, r3, #16
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	061b      	lsls	r3, r3, #24
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	4a41      	ldr	r2, [pc, #260]	; (8000dcc <PowerMonitor_ParsePowers+0x138>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1152      	asrs	r2, r2, #5
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	655a      	str	r2, [r3, #84]	; 0x54
	//Get Active Power 2
	IC->Channel2.ActivePower = (DataPointer[4] | (DataPointer[5] << 8) | (DataPointer[6] << 16) | (DataPointer[7] << 24) ) / CALC_POWER_DIVIDER;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3306      	adds	r3, #6
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	041b      	lsls	r3, r3, #16
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3307      	adds	r3, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	061b      	lsls	r3, r3, #24
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <PowerMonitor_ParsePowers+0x138>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1152      	asrs	r2, r2, #5
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	669a      	str	r2, [r3, #104]	; 0x68
	//Get Reactive Power 1
	IC->Channel1.ReactivePower = DataPointer[8] | (DataPointer[9] << 8) | (DataPointer[10] << 16) | (DataPointer[11] << 24);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3308      	adds	r3, #8
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3309      	adds	r3, #9
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	431a      	orrs	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	330a      	adds	r3, #10
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	041b      	lsls	r3, r3, #16
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	330b      	adds	r3, #11
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	4313      	orrs	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
	//Get Reactive Power 2
	IC->Channel2.ReactivePower = DataPointer[12] | (DataPointer[13] << 8) | (DataPointer[14] << 16) | (DataPointer[15] << 24);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	330c      	adds	r3, #12
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	330d      	adds	r3, #13
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	330e      	adds	r3, #14
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	041b      	lsls	r3, r3, #16
 8000d56:	431a      	orrs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	330f      	adds	r3, #15
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	061b      	lsls	r3, r3, #24
 8000d60:	4313      	orrs	r3, r2
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	66da      	str	r2, [r3, #108]	; 0x6c
	//Get Apparent Power 1
	IC->Channel1.ApparentPower = DataPointer[16] | (DataPointer[17] << 8) | (DataPointer[18] << 16) | (DataPointer[19] << 24);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3311      	adds	r3, #17
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3312      	adds	r3, #18
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	041b      	lsls	r3, r3, #16
 8000d82:	431a      	orrs	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3313      	adds	r3, #19
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	061b      	lsls	r3, r3, #24
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	461a      	mov	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	65da      	str	r2, [r3, #92]	; 0x5c
	//Get Apparent Power 1
	IC->Channel2.ApparentPower = DataPointer[20] | (DataPointer[21] << 8) | (DataPointer[22] << 16) | (DataPointer[23] << 24);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3314      	adds	r3, #20
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3315      	adds	r3, #21
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3316      	adds	r3, #22
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	431a      	orrs	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3317      	adds	r3, #23
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	061b      	lsls	r3, r3, #24
 8000db8:	4313      	orrs	r3, r2
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	51eb851f 	.word	0x51eb851f

08000dd0 <PowerMonitor_Parse>:


PowerMonitor_Status_t PowerMonitor_Parse(PowerMonitor_t *IC)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	uint16_t Tmp;
	uint8_t *Byte = IC->ReceiveBuffer;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3324      	adds	r3, #36	; 0x24
 8000ddc:	60fb      	str	r3, [r7, #12]

	if(*Byte == 0x00)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <PowerMonitor_Parse+0x1a>
	{
		return POWER_MONITOR_BUSY; 	//no new frame
 8000de6:	2302      	movs	r3, #2
 8000de8:	e185      	b.n	80010f6 <PowerMonitor_Parse+0x326>
	}

	if(*Byte == MCP_NACK)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b15      	cmp	r3, #21
 8000df0:	d101      	bne.n	8000df6 <PowerMonitor_Parse+0x26>
	{
		return POWER_MONITOR_ERROR;	//NACK received, error
 8000df2:	2301      	movs	r3, #1
 8000df4:	e17f      	b.n	80010f6 <PowerMonitor_Parse+0x326>
	}
	else if(*Byte == MCP_ACK)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d102      	bne.n	8000e04 <PowerMonitor_Parse+0x34>
	{
		Byte+=2;					//Go to data in frame (skip number of bytes byte)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3302      	adds	r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
	}

	switch(IC->ExpectedData)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e0a:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d05f      	beq.n	8000ed2 <PowerMonitor_Parse+0x102>
 8000e12:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f300 8160 	bgt.w	80010dc <PowerMonitor_Parse+0x30c>
 8000e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1e:	dc53      	bgt.n	8000ec8 <PowerMonitor_Parse+0xf8>
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	f2c0 815b 	blt.w	80010dc <PowerMonitor_Parse+0x30c>
 8000e26:	3b06      	subs	r3, #6
 8000e28:	2b24      	cmp	r3, #36	; 0x24
 8000e2a:	f200 8157 	bhi.w	80010dc <PowerMonitor_Parse+0x30c>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <PowerMonitor_Parse+0x64>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000ee7 	.word	0x08000ee7
 8000e38:	080010dd 	.word	0x080010dd
 8000e3c:	08000f05 	.word	0x08000f05
 8000e40:	080010dd 	.word	0x080010dd
 8000e44:	08000f35 	.word	0x08000f35
 8000e48:	080010dd 	.word	0x080010dd
 8000e4c:	08000f51 	.word	0x08000f51
 8000e50:	080010dd 	.word	0x080010dd
 8000e54:	08000f6d 	.word	0x08000f6d
 8000e58:	080010dd 	.word	0x080010dd
 8000e5c:	080010dd 	.word	0x080010dd
 8000e60:	080010dd 	.word	0x080010dd
 8000e64:	08000fa1 	.word	0x08000fa1
 8000e68:	080010dd 	.word	0x080010dd
 8000e6c:	080010dd 	.word	0x080010dd
 8000e70:	080010dd 	.word	0x080010dd
 8000e74:	08000fd5 	.word	0x08000fd5
 8000e78:	080010dd 	.word	0x080010dd
 8000e7c:	080010dd 	.word	0x080010dd
 8000e80:	080010dd 	.word	0x080010dd
 8000e84:	08001001 	.word	0x08001001
 8000e88:	080010dd 	.word	0x080010dd
 8000e8c:	080010dd 	.word	0x080010dd
 8000e90:	080010dd 	.word	0x080010dd
 8000e94:	0800102d 	.word	0x0800102d
 8000e98:	080010dd 	.word	0x080010dd
 8000e9c:	080010dd 	.word	0x080010dd
 8000ea0:	080010dd 	.word	0x080010dd
 8000ea4:	08001059 	.word	0x08001059
 8000ea8:	080010dd 	.word	0x080010dd
 8000eac:	080010dd 	.word	0x080010dd
 8000eb0:	080010dd 	.word	0x080010dd
 8000eb4:	08001085 	.word	0x08001085
 8000eb8:	080010dd 	.word	0x080010dd
 8000ebc:	080010dd 	.word	0x080010dd
 8000ec0:	080010dd 	.word	0x080010dd
 8000ec4:	080010b1 	.word	0x080010b1
 8000ec8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d005      	beq.n	8000edc <PowerMonitor_Parse+0x10c>
	case APPARENT_POWER_2:
		IC->Channel2.ApparentPower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
		break;

	default:
		break;
 8000ed0:	e104      	b.n	80010dc <PowerMonitor_Parse+0x30c>
		PowerMonitor_ParseBasics(IC, Byte);
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fe45 	bl	8000b64 <PowerMonitor_ParseBasics>
		break;
 8000eda:	e100      	b.n	80010de <PowerMonitor_Parse+0x30e>
		PowerMonitor_ParsePowers(IC, Byte);
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fed8 	bl	8000c94 <PowerMonitor_ParsePowers>
		break;
 8000ee4:	e0fb      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->VoltageRMS =  Byte[0] | (Byte[1] << 8);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		break;
 8000f02:	e0ec      	b.n	80010de <PowerMonitor_Parse+0x30e>
		Tmp = Byte[0] | (Byte[1] << 8);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	817b      	strh	r3, [r7, #10]
		IC->LineFrequency = (float)Tmp / CALC_FREQUENCY_DIVIDER;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f24:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001100 <PowerMonitor_Parse+0x330>
 8000f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		break;
 8000f32:	e0d4      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel1.PowerFactor =  Byte[0] | (Byte[1] << 8);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		break;
 8000f4e:	e0c6      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel2.PowerFactor =  Byte[0] | (Byte[1] << 8);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		break;
 8000f6a:	e0b8      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel1.CurrentRMS = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	041b      	lsls	r3, r3, #16
 8000f84:	431a      	orrs	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3303      	adds	r3, #3
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		break;
 8000f9e:	e09e      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel2.CurrentRMS = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		break;
 8000fd2:	e084      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel1.ActivePower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3303      	adds	r3, #3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	061b      	lsls	r3, r3, #24
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
		break;
 8000ffe:	e06e      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel2.ActivePower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	431a      	orrs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3302      	adds	r3, #2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	431a      	orrs	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3303      	adds	r3, #3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	4313      	orrs	r3, r2
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	669a      	str	r2, [r3, #104]	; 0x68
		break;
 800102a:	e058      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel1.ReactivePower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3302      	adds	r3, #2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	041b      	lsls	r3, r3, #16
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3303      	adds	r3, #3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	4313      	orrs	r3, r2
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
		break;
 8001056:	e042      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel2.ReactivePower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	431a      	orrs	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	431a      	orrs	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3303      	adds	r3, #3
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	061b      	lsls	r3, r3, #24
 800107a:	4313      	orrs	r3, r2
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	66da      	str	r2, [r3, #108]	; 0x6c
		break;
 8001082:	e02c      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel1.ApparentPower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	431a      	orrs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3302      	adds	r3, #2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3303      	adds	r3, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	061b      	lsls	r3, r3, #24
 80010a6:	4313      	orrs	r3, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	65da      	str	r2, [r3, #92]	; 0x5c
		break;
 80010ae:	e016      	b.n	80010de <PowerMonitor_Parse+0x30e>
		IC->Channel2.ApparentPower = Byte[0] | (Byte[1] << 8) | (Byte[2] << 16) | (Byte[3] << 24);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	431a      	orrs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3302      	adds	r3, #2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	431a      	orrs	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3303      	adds	r3, #3
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	4313      	orrs	r3, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
 80010da:	e000      	b.n	80010de <PowerMonitor_Parse+0x30e>
		break;
 80010dc:	bf00      	nop
	}

	memset(IC->ReceiveBuffer,0x00,32);		//clear parsed frame
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3324      	adds	r3, #36	; 0x24
 80010e2:	2220      	movs	r2, #32
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 f924 	bl	8005334 <memset>
	IC->ExpectedData = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	return POWER_MONITOR_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	447a0000 	.word	0x447a0000

08001104 <PowerMonitor_ReadBasics>:
		}
	}
}

void PowerMonitor_ReadBasics(PowerMonitor_t *IC)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if(POWER_MONITOR_OK == PowerMonitor_ReadData(IC, IC->ReceiveBuffer, VOLTAGE_RMS, 16) )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001112:	2310      	movs	r3, #16
 8001114:	2206      	movs	r2, #6
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fcdf 	bl	8000ada <PowerMonitor_ReadData>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <PowerMonitor_ReadBasics+0x28>
	{
		IC->ExpectedData = READ_ALL_BASICS;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8001128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <PowerMonitor_ReadPowers>:

void PowerMonitor_ReadPowers(PowerMonitor_t *IC)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if(POWER_MONITOR_OK == PowerMonitor_ReadData(IC, IC->ReceiveBuffer, ACTIVE_POWER_1, 24) )
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001142:	2318      	movs	r3, #24
 8001144:	2216      	movs	r2, #22
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fcc7 	bl	8000ada <PowerMonitor_ReadData>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <PowerMonitor_ReadPowers+0x28>
	{
		IC->ExpectedData = READ_ALL_POWERS;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001158:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <PowerMeasurement_Init>:
uint32_t LastTick_Timeout = 0;
uint8_t TimeoutRetries;
uint8_t NackRetries;

void PowerMeasurement_Init(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	PowerMonitor_Init(&PowerStripIC, huart);
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <PowerMeasurement_Init+0x18>)
 8001170:	f7ff fc5a 	bl	8000a28 <PowerMonitor_Init>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000264 	.word	0x20000264

08001180 <PowerMeasurement_Process>:


void PowerMeasurement_Process(AC_Parameters_t *ParametersOutput)			//Proces komunikacji z scalakiem pomiarowym (MCP39F511N)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	static uint8_t ReadOrder = 0;
	static uint32_t LastTick_Delay = 0;											//Tick sluzacy do odmierzania odstepu miedzy zapytaniami
	uint32_t CurrentTick;														//Aktualny tick pobierany przy kazdorazowym wejsciu w ten process
	uint8_t Status;

	CurrentTick = HAL_GetTick();
 8001188:	f000 fbae 	bl	80018e8 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

	if((CurrentTick - LastTick_Delay > ASK_DELAY_MS) && DataInProgressFlag == 0)	//Sprzawdz czy uplynal odpowiedni czas od ostatniego zapytania, oraz czy aktualnie nie czekamy
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <PowerMeasurement_Process+0x168>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2bc8      	cmp	r3, #200	; 0xc8
 8001198:	d925      	bls.n	80011e6 <PowerMeasurement_Process+0x66>
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <PowerMeasurement_Process+0x16c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d121      	bne.n	80011e6 <PowerMeasurement_Process+0x66>
	{																			//na jakąś ramkę bądź nie parsujemy już jakichś danych (DataInProgressFlag zerowana jest po
		switch(ReadOrder)														//przetworzeniu odebranej ramki
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <PowerMeasurement_Process+0x170>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <PowerMeasurement_Process+0x30>
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d007      	beq.n	80011be <PowerMeasurement_Process+0x3e>
 80011ae:	e00d      	b.n	80011cc <PowerMeasurement_Process+0x4c>
		{
		case 0:																	//Zmienna ReadOrder odpowiada za wysyłanie naprzemiennie dwóch rodzajów zapytań
			PowerMonitor_ReadBasics(&PowerStripIC);								//Zapytanie o basics (napięcie, czestotliwosc, prąd)
 80011b0:	4850      	ldr	r0, [pc, #320]	; (80012f4 <PowerMeasurement_Process+0x174>)
 80011b2:	f7ff ffa7 	bl	8001104 <PowerMonitor_ReadBasics>
			ReadOrder = 1;														//Zmiana ReadOrder by w następnym wejściu zapytać o Powers
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <PowerMeasurement_Process+0x170>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
			break;
 80011bc:	e006      	b.n	80011cc <PowerMeasurement_Process+0x4c>
		case 1:
			PowerMonitor_ReadPowers(&PowerStripIC);								//Zapytanie o Powers (wszystkie rodzaje mocy)
 80011be:	484d      	ldr	r0, [pc, #308]	; (80012f4 <PowerMeasurement_Process+0x174>)
 80011c0:	f7ff ffb8 	bl	8001134 <PowerMonitor_ReadPowers>
			ReadOrder = 0;														//Zmiana ReadOrder
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <PowerMeasurement_Process+0x170>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
			break;
 80011ca:	bf00      	nop
		}
		DataInProgressFlag = 1;													//gdy wyślemy zapytanie, ustawiamy DataInProgressFlag na 1 by nie wysyłać kolejnego
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <PowerMeasurement_Process+0x16c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		LastTick_Delay = HAL_GetTick();											//Zapisujemy last tick by odmierzac znow czas odstepu miedzy zapytaniami
 80011d2:	f000 fb89 	bl	80018e8 <HAL_GetTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <PowerMeasurement_Process+0x168>)
 80011da:	6013      	str	r3, [r2, #0]
		LastTick_Timeout = HAL_GetTick();										//Zapisujemy last tick do odmierzania timeout w oczekiwaniu na odpowiedz
 80011dc:	f000 fb84 	bl	80018e8 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <PowerMeasurement_Process+0x178>)
 80011e4:	6013      	str	r3, [r2, #0]
	}

	if(1 == DataReceivedFlag)													//Tu wchodzimy w celu parsowania otrzymanej ramki. DataReceivedFlag ustawiane jest jest
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <PowerMeasurement_Process+0x17c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d146      	bne.n	800127e <PowerMeasurement_Process+0xfe>
	{																			//przez przerwanie w w funkcji RX_Callback
		Status = PowerMonitor_Parse(&PowerStripIC);
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <PowerMeasurement_Process+0x174>)
 80011f2:	f7ff fded 	bl	8000dd0 <PowerMonitor_Parse>
 80011f6:	4603      	mov	r3, r0
 80011f8:	72fb      	strb	r3, [r7, #11]
		if(POWER_MONITOR_OK == Status)											//jesli parsowanie sie powiodlo, wypluwami zmienne na zewnatrz. to tutaj decydujemy jakie
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11e      	bne.n	800123e <PowerMeasurement_Process+0xbe>
		{																		//dane sa udostepnianie, PowerStripIC czyta wszystko z MCP39F511N
			ParametersOutput->VoltageRMS = PowerStripIC.VoltageRMS;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <PowerMeasurement_Process+0x174>)
 8001202:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	811a      	strh	r2, [r3, #8]
			ParametersOutput->ActivePower = PowerStripIC.Channel1.ActivePower + PowerStripIC.Channel2.ActivePower;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <PowerMeasurement_Process+0x174>)
 800120c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <PowerMeasurement_Process+0x174>)
 8001210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001212:	441a      	add	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
			ParametersOutput->CurrentRMS = PowerStripIC.Channel1.CurrentRMS + PowerStripIC.Channel2.CurrentRMS;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <PowerMeasurement_Process+0x174>)
 800121a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <PowerMeasurement_Process+0x174>)
 8001220:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a01 	vstr	s15, [r3, #4]

			if(ParametersOutput->Error == 0x01)					//usuń error jeśli udało się odnowić komunikaje po jakims czasie
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7a9b      	ldrb	r3, [r3, #10]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d119      	bne.n	800126a <PowerMeasurement_Process+0xea>
			{
				ParametersOutput->Error = 0x00;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	729a      	strb	r2, [r3, #10]
 800123c:	e015      	b.n	800126a <PowerMeasurement_Process+0xea>

			}

		}
		else if(POWER_MONITOR_BUSY == Status)									//obsluga przypadku gdy nie mamy zadnej ramki do odebrania (program nigdy nie powinien tu wejsc poniewaz
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d012      	beq.n	800126a <PowerMeasurement_Process+0xea>
		{																		//zawsze bedzie ramka do parsowania gdy DataReceivedFlag == 1)

		}
		else if(POWER_MONITOR_ERROR == Status)									//obsluga bledu, gdy MCP39F511N zwroci NACK (bład ramki)
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10f      	bne.n	800126a <PowerMeasurement_Process+0xea>
		{
			NackRetries++;
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <PowerMeasurement_Process+0x180>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <PowerMeasurement_Process+0x180>)
 8001254:	701a      	strb	r2, [r3, #0]
			if(NackRetries >= MAX_RETRIES)
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <PowerMeasurement_Process+0x180>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b13      	cmp	r3, #19
 800125c:	d905      	bls.n	800126a <PowerMeasurement_Process+0xea>
			{
				ParametersOutput->Error = 0x01;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	729a      	strb	r2, [r3, #10]
				NackRetries = 0;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <PowerMeasurement_Process+0x180>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
			}
		}
		DataInProgressFlag = 0;													//po parsowaniu ramki, wyzeruj obie flagi my moglo zostac wyslane kolejne zapytanie
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <PowerMeasurement_Process+0x16c>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
		DataReceivedFlag = 0;													//oraz by czekac na przybycie kolejnej ramki
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <PowerMeasurement_Process+0x17c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
		TimeoutRetries = 0;
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <PowerMeasurement_Process+0x184>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
			ParametersOutput->ActivePower = 0;
			ParametersOutput->CurrentRMS = 0;
			TimeoutRetries = 0;
		}
	}
}
 800127c:	e02f      	b.n	80012de <PowerMeasurement_Process+0x15e>
	else if( (HAL_GetTick() - LastTick_Timeout) > COMMUNICATION_TIMEOUT	)		//obsluga timeoutu komunikacji (gdy odpowiedz nie przyjdzie w czasie okreslonym w makrze
 800127e:	f000 fb33 	bl	80018e8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <PowerMeasurement_Process+0x178>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800128e:	d926      	bls.n	80012de <PowerMeasurement_Process+0x15e>
		LastTick_Delay = HAL_GetTick();											//Reset ticku odstepu ostatniego zapytania oraz reset flagi DataInProgress w celu
 8001290:	f000 fb2a 	bl	80018e8 <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <PowerMeasurement_Process+0x168>)
 8001298:	6013      	str	r3, [r2, #0]
		LastTick_Timeout = HAL_GetTick();
 800129a:	f000 fb25 	bl	80018e8 <HAL_GetTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <PowerMeasurement_Process+0x178>)
 80012a2:	6013      	str	r3, [r2, #0]
		DataInProgressFlag = 0;													//ponownej proby komunikacji
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <PowerMeasurement_Process+0x16c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		TimeoutRetries++;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <PowerMeasurement_Process+0x184>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <PowerMeasurement_Process+0x184>)
 80012b4:	701a      	strb	r2, [r3, #0]
		if(TimeoutRetries >= MAX_RETRIES)										//po osiagniaciu maksymalnej liczby prob, zglos blad, wyzeruj retries by probowac
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <PowerMeasurement_Process+0x184>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b13      	cmp	r3, #19
 80012bc:	d90f      	bls.n	80012de <PowerMeasurement_Process+0x15e>
			ParametersOutput->Error = 0x01;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	729a      	strb	r2, [r3, #10]
			ParametersOutput->VoltageRMS = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	811a      	strh	r2, [r3, #8]
			ParametersOutput->ActivePower = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
			ParametersOutput->CurrentRMS = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
			TimeoutRetries = 0;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <PowerMeasurement_Process+0x184>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200002e4 	.word	0x200002e4
 80012ec:	200002d8 	.word	0x200002d8
 80012f0:	200002e8 	.word	0x200002e8
 80012f4:	20000264 	.word	0x20000264
 80012f8:	200002dc 	.word	0x200002dc
 80012fc:	200002d9 	.word	0x200002d9
 8001300:	200002e1 	.word	0x200002e1
 8001304:	200002e0 	.word	0x200002e0

08001308 <PowerMeasurement_RX_Callback>:

void PowerMeasurement_RX_Callback(UART_HandleTypeDef *huart)					//callback do umieszczenie w przerwanie UART_RX - IDLE
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(huart == PowerStripIC.UART)
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <PowerMeasurement_RX_Callback+0x24>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d102      	bne.n	8001320 <PowerMeasurement_RX_Callback+0x18>
	{
		DataReceivedFlag = 1;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <PowerMeasurement_RX_Callback+0x28>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]

	}
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000264 	.word	0x20000264
 8001330:	200002d9 	.word	0x200002d9

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 fa76 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA1_Stream2_IRQHandler+0x10>)
 80013de:	f000 fd5d 	bl	8001e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000374 	.word	0x20000374

080013ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <DMA1_Stream4_IRQHandler+0x10>)
 80013f2:	f000 fd53 	bl	8001e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003d4 	.word	0x200003d4

08001400 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001404:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001408:	f001 fca0 	bl	8002d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <UART4_IRQHandler+0x10>)
 8001416:	f002 fba3 	bl	8003b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002ec 	.word	0x200002ec

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_UART4_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_UART4_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_UART4_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_UART4_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_UART4_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_UART4_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_UART4_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_UART4_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_UART4_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_UART4_Init+0x4c>)
 8001480:	f002 fa3c 	bl	80038fc <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800148a:	f7ff fac8 	bl	8000a1e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002ec 	.word	0x200002ec
 8001498:	40004c00 	.word	0x40004c00

0800149c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART3_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014d4:	f002 fa12 	bl	80038fc <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f7ff fa9e 	bl	8000a1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40004800 	.word	0x40004800

080014f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a61      	ldr	r2, [pc, #388]	; (8001694 <HAL_UART_MspInit+0x1a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 808a 	bne.w	8001628 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 800151e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800154c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800155e:	2308      	movs	r3, #8
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	484c      	ldr	r0, [pc, #304]	; (800169c <HAL_UART_MspInit+0x1ac>)
 800156a:	f001 fa29 	bl	80029c0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <HAL_UART_MspInit+0x1b4>)
 8001572:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 8001576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 800158a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 80015b0:	f000 fadc 	bl	8001b6c <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015ba:	f7ff fa30 	bl	8000a1e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
 80015c4:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <HAL_UART_MspInit+0x1b0>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015cc:	4a37      	ldr	r2, [pc, #220]	; (80016ac <HAL_UART_MspInit+0x1bc>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015d8:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015da:	2240      	movs	r2, #64	; 0x40
 80015dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800160a:	4827      	ldr	r0, [pc, #156]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 800160c:	f000 faae 	bl	8001b6c <HAL_DMA_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001616:	f7ff fa02 	bl	8000a1e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <HAL_UART_MspInit+0x1b8>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001626:	e031      	b.n	800168c <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <HAL_UART_MspInit+0x1c0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12c      	bne.n	800168c <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_UART_MspInit+0x1a8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800166a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800167c:	2307      	movs	r3, #7
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <HAL_UART_MspInit+0x1c4>)
 8001688:	f001 f99a 	bl	80029c0 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40004c00 	.word	0x40004c00
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	20000374 	.word	0x20000374
 80016a4:	40026040 	.word	0x40026040
 80016a8:	200003d4 	.word	0x200003d4
 80016ac:	40026070 	.word	0x40026070
 80016b0:	40004800 	.word	0x40004800
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c6:	2204      	movs	r2, #4
 80016c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d8:	2202      	movs	r2, #2
 80016da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016de:	2201      	movs	r2, #1
 80016e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fc:	f001 fb49 	bl	8002d92 <HAL_PCD_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff f98a 	bl	8000a1e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000434 	.word	0x20000434

08001714 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001734:	d13f      	bne.n	80017b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001752:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001764:	230a      	movs	r3, #10
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <HAL_PCD_MspInit+0xb0>)
 8001770:	f001 f926 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_PCD_MspInit+0xb0>)
 800178a:	f001 f919 	bl	80029c0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6353      	str	r3, [r2, #52]	; 0x34
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PCD_MspInit+0xac>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f2:	f7ff fe17 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 fda5 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff f851 	bl	80008a0 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001800:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800180c:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8001810:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001814:	20000944 	.word	0x20000944

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f94f 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fd70 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f967 	bl	8001b52 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f92f 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000940 	.word	0x20000940

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000940 	.word	0x20000940

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff feb6 	bl	80018e8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e099      	b.n	8001cbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba8:	e00f      	b.n	8001bca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001baa:	f7ff fe9d 	bl	80018e8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d908      	bls.n	8001bca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e078      	b.n	8001cbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1e8      	bne.n	8001baa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_DMA_Init+0x158>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f023 0307 	bic.w	r3, r3, #7
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d117      	bne.n	8001c8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00e      	beq.n	8001c8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fb01 	bl	8002278 <DMA_CheckFifoParam>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e016      	b.n	8001cbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fab8 	bl	800220c <DMA_CalcBaseAndBitshift>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	223f      	movs	r2, #63	; 0x3f
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	f010803f 	.word	0xf010803f

08001cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_DMA_Start_IT+0x26>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e040      	b.n	8001d70 <HAL_DMA_Start_IT+0xa8>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12f      	bne.n	8001d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fa4a 	bl	80021b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	223f      	movs	r2, #63	; 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0216 	orr.w	r2, r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0208 	orr.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e005      	b.n	8001d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d86:	f7ff fdaf 	bl	80018e8 <HAL_GetTick>
 8001d8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e052      	b.n	8001e50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0216 	bic.w	r2, r2, #22
 8001db8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <HAL_DMA_Abort+0x62>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0208 	bic.w	r2, r2, #8
 8001de8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfa:	e013      	b.n	8001e24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dfc:	f7ff fd74 	bl	80018e8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d90c      	bls.n	8001e24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e015      	b.n	8001e50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1e4      	bne.n	8001dfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	223f      	movs	r2, #63	; 0x3f
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d004      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00c      	b.n	8001e90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2205      	movs	r2, #5
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ea8:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_DMA_IRQHandler+0x248>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a8e      	ldr	r2, [pc, #568]	; (80020e8 <HAL_DMA_IRQHandler+0x24c>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01a      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2204      	movs	r2, #4
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2204      	movs	r2, #4
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2210      	movs	r2, #16
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d043      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03c      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2210      	movs	r2, #16
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d024      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
 8001fca:	e01f      	b.n	800200c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e016      	b.n	800200c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2220      	movs	r2, #32
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808f 	beq.w	800213c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8087 	beq.w	800213c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2220      	movs	r2, #32
 8002034:	409a      	lsls	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b05      	cmp	r3, #5
 8002044:	d136      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0216 	bic.w	r2, r2, #22
 8002054:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002064:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <HAL_DMA_IRQHandler+0x1da>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0208 	bic.w	r2, r2, #8
 8002084:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	223f      	movs	r2, #63	; 0x3f
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d07e      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
        }
        return;
 80020b2:	e079      	b.n	80021a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01d      	beq.n	80020fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d031      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e02c      	b.n	800213c <HAL_DMA_IRQHandler+0x2a0>
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000
 80020e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d023      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e01e      	b.n	800213c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10f      	bne.n	800212c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0210 	bic.w	r2, r2, #16
 800211a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	2b00      	cmp	r3, #0
 8002142:	d032      	beq.n	80021aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d022      	beq.n	8002196 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2205      	movs	r2, #5
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3301      	adds	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d307      	bcc.n	8002184 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f2      	bne.n	8002168 <HAL_DMA_IRQHandler+0x2cc>
 8002182:	e000      	b.n	8002186 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002184:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
 80021a6:	e000      	b.n	80021aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a8:	bf00      	nop
    }
  }
}
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d108      	bne.n	80021f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021ee:	e007      	b.n	8002200 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b10      	subs	r3, #16
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <DMA_CalcBaseAndBitshift+0x64>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <DMA_CalcBaseAndBitshift+0x68>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d909      	bls.n	800224e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	; 0x58
 800224c:	e007      	b.n	800225e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	aaaaaaab 	.word	0xaaaaaaab
 8002274:	080053bc 	.word	0x080053bc

08002278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d856      	bhi.n	8002346 <DMA_CheckFifoParam+0xce>
 8002298:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <DMA_CheckFifoParam+0x28>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022b1 	.word	0x080022b1
 80022a4:	080022c3 	.word	0x080022c3
 80022a8:	080022b1 	.word	0x080022b1
 80022ac:	08002347 	.word	0x08002347
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d046      	beq.n	800234a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c0:	e043      	b.n	800234a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ca:	d140      	bne.n	800234e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e03d      	b.n	800234e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022da:	d121      	bne.n	8002320 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d837      	bhi.n	8002352 <DMA_CheckFifoParam+0xda>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x70>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	080022ff 	.word	0x080022ff
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	08002311 	.word	0x08002311
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e030      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d025      	beq.n	8002356 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230e:	e022      	b.n	8002356 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002318:	d11f      	bne.n	800235a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800231e:	e01c      	b.n	800235a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d903      	bls.n	800232e <DMA_CheckFifoParam+0xb6>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d003      	beq.n	8002334 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800232c:	e018      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      break;
 8002332:	e015      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00e      	beq.n	800235e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e00b      	b.n	800235e <DMA_CheckFifoParam+0xe6>
      break;
 8002346:	bf00      	nop
 8002348:	e00a      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e008      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e006      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e004      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
 8002358:	e002      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;   
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
    }
  } 
  
  return status; 
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06c      	b.n	800245c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2223      	movs	r2, #35	; 0x23
 8002390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe f90f 	bl	80005b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_ETH_Init+0xf4>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4927      	ldr	r1, [pc, #156]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_ETH_Init+0xf8>)
 80023d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ec:	f7ff fa7c 	bl	80018e8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023f2:	e011      	b.n	8002418 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023f4:	f7ff fa78 	bl	80018e8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002402:	d909      	bls.n	8002418 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	22e0      	movs	r2, #224	; 0xe0
 8002410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e021      	b.n	800245c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e4      	bne.n	80023f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f958 	bl	80026e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9ff 	bl	8002834 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa55 	bl	80028e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	461a      	mov	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f9bd 	bl	80027c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2210      	movs	r2, #16
 8002456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800

0800246c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <ETH_SetMACConfig+0x15c>)
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7c1b      	ldrb	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <ETH_SetMACConfig+0x28>
 800248e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002492:	e000      	b.n	8002496 <ETH_SetMACConfig+0x2a>
 8002494:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	7c5b      	ldrb	r3, [r3, #17]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <ETH_SetMACConfig+0x38>
 800249e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a2:	e000      	b.n	80024a6 <ETH_SetMACConfig+0x3a>
 80024a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7fdb      	ldrb	r3, [r3, #31]
 80024b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	7f92      	ldrb	r2, [r2, #30]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d102      	bne.n	80024ca <ETH_SetMACConfig+0x5e>
 80024c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c8:	e000      	b.n	80024cc <ETH_SetMACConfig+0x60>
 80024ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80024cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d102      	bne.n	80024f4 <ETH_SetMACConfig+0x88>
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	e000      	b.n	80024f6 <ETH_SetMACConfig+0x8a>
 80024f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7bdb      	ldrb	r3, [r3, #15]
 80024fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800250c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800250e:	4313      	orrs	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff f9ea 	bl	8001900 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002552:	2a00      	cmp	r2, #0
 8002554:	d101      	bne.n	800255a <ETH_SetMACConfig+0xee>
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	e000      	b.n	800255c <ETH_SetMACConfig+0xf0>
 800255a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800255c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800256a:	2a01      	cmp	r2, #1
 800256c:	d101      	bne.n	8002572 <ETH_SetMACConfig+0x106>
 800256e:	2208      	movs	r2, #8
 8002570:	e000      	b.n	8002574 <ETH_SetMACConfig+0x108>
 8002572:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002574:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800257c:	2a01      	cmp	r2, #1
 800257e:	d101      	bne.n	8002584 <ETH_SetMACConfig+0x118>
 8002580:	2204      	movs	r2, #4
 8002582:	e000      	b.n	8002586 <ETH_SetMACConfig+0x11a>
 8002584:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800258e:	2a01      	cmp	r2, #1
 8002590:	d101      	bne.n	8002596 <ETH_SetMACConfig+0x12a>
 8002592:	2202      	movs	r2, #2
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0x12c>
 8002596:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002598:	4313      	orrs	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff f9a5 	bl	8001900 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	ff20810f 	.word	0xff20810f

080025cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <ETH_SetDMAConfig+0x110>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <ETH_SetDMAConfig+0x2c>
 80025f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025f6:	e000      	b.n	80025fa <ETH_SetDMAConfig+0x2e>
 80025f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	7b5b      	ldrb	r3, [r3, #13]
 80025fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002600:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	7f52      	ldrb	r2, [r2, #29]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d102      	bne.n	8002610 <ETH_SetDMAConfig+0x44>
 800260a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800260e:	e000      	b.n	8002612 <ETH_SetDMAConfig+0x46>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7b9b      	ldrb	r3, [r3, #14]
 8002618:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800261a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f1b      	ldrb	r3, [r3, #28]
 8002626:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7f9b      	ldrb	r3, [r3, #30]
 800262e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002630:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002636:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002640:	4313      	orrs	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff f94c 	bl	8001900 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002680:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002686:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800268c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002694:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002696:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800269e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff f91d 	bl	8001900 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	f8de3f23 	.word	0xf8de3f23

080026e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0a6      	sub	sp, #152	; 0x98
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800271c:	2300      	movs	r3, #0
 800271e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002726:	2300      	movs	r3, #0
 8002728:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe86 	bl	800246c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002764:	2301      	movs	r3, #1
 8002766:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800278c:	2301      	movs	r3, #1
 800278e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002794:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800279c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff08 	bl	80025cc <ETH_SetDMAConfig>
}
 80027bc:	bf00      	nop
 80027be:	3798      	adds	r7, #152	; 0x98
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3305      	adds	r3, #5
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	3204      	adds	r2, #4
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <ETH_MACAddressConfig+0x68>)
 80027e6:	4413      	add	r3, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3303      	adds	r3, #3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	061a      	lsls	r2, r3, #24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3302      	adds	r3, #2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	041b      	lsls	r3, r3, #16
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <ETH_MACAddressConfig+0x6c>)
 8002816:	4413      	add	r3, r2
 8002818:	461a      	mov	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40028040 	.word	0x40028040
 8002830:	40028044 	.word	0x40028044

08002834 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e03e      	b.n	80028c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	3206      	adds	r2, #6
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d80c      	bhi.n	80028a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	e004      	b.n	80028ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d9bd      	bls.n	8002842 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	611a      	str	r2, [r3, #16]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e046      	b.n	8002982 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002930:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002938:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	3212      	adds	r2, #18
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d80c      	bhi.n	8002972 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6919      	ldr	r1, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	e004      	b.n	800297c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d9b5      	bls.n	80028f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	60da      	str	r2, [r3, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e177      	b.n	8002ccc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 8166 	bne.w	8002cc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d005      	beq.n	8002a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d130      	bne.n	8002a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 0201 	and.w	r2, r3, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d017      	beq.n	8002ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80c0 	beq.w	8002cc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b62:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_GPIO_Init+0x32c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d037      	beq.n	8002bfe <HAL_GPIO_Init+0x23e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d031      	beq.n	8002bfa <HAL_GPIO_Init+0x23a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02b      	beq.n	8002bf6 <HAL_GPIO_Init+0x236>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a55      	ldr	r2, [pc, #340]	; (8002cf8 <HAL_GPIO_Init+0x338>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d025      	beq.n	8002bf2 <HAL_GPIO_Init+0x232>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_GPIO_Init+0x33c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x22e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_GPIO_Init+0x340>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x22a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_GPIO_Init+0x344>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_GPIO_Init+0x348>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x222>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_GPIO_Init+0x34c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x21e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4f      	ldr	r2, [pc, #316]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x21a>
 8002bd6:	2309      	movs	r3, #9
 8002bd8:	e012      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bda:	230a      	movs	r3, #10
 8002bdc:	e010      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bde:	2308      	movs	r3, #8
 8002be0:	e00e      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002be2:	2307      	movs	r3, #7
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x240>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <HAL_GPIO_Init+0x354>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f ae84 	bls.w	80029dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40021800 	.word	0x40021800
 8002d08:	40021c00 	.word	0x40021c00
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40022400 	.word	0x40022400
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d34:	e003      	b.n	8002d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	041a      	lsls	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	619a      	str	r2, [r3, #24]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f806 	bl	8002d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d94:	b08f      	sub	sp, #60	; 0x3c
 8002d96:	af0a      	add	r7, sp, #40	; 0x28
 8002d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e10f      	b.n	8002fc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fca8 	bl	8001714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 f805 	bl	8004df2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	687e      	ldr	r6, [r7, #4]
 8002df0:	466d      	mov	r5, sp
 8002df2:	f106 0410 	add.w	r4, r6, #16
 8002df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e06:	1d33      	adds	r3, r6, #4
 8002e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e0a:	6838      	ldr	r0, [r7, #0]
 8002e0c:	f001 ff90 	bl	8004d30 <USB_CoreInit>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0d0      	b.n	8002fc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fff3 	bl	8004e14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e04a      	b.n	8002eca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	333d      	adds	r3, #61	; 0x3d
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	333c      	adds	r3, #60	; 0x3c
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	b298      	uxth	r0, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3344      	adds	r3, #68	; 0x44
 8002e70:	4602      	mov	r2, r0
 8002e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3340      	adds	r3, #64	; 0x40
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3348      	adds	r3, #72	; 0x48
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334c      	adds	r3, #76	; 0x4c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3354      	adds	r3, #84	; 0x54
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3af      	bcc.n	8002e34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e044      	b.n	8002f64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	3301      	adds	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3b5      	bcc.n	8002eda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	687e      	ldr	r6, [r7, #4]
 8002f76:	466d      	mov	r5, sp
 8002f78:	f106 0410 	add.w	r4, r6, #16
 8002f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f8c:	1d33      	adds	r3, r6, #4
 8002f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f001 ff8b 	bl	8004eac <USB_DevInit>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e00d      	b.n	8002fc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 f956 	bl	800526e <USB_DevDisconnect>

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e267      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d075      	beq.n	80030d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d00c      	beq.n	8003010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d112      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300e:	d10b      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	4b7e      	ldr	r3, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05b      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d157      	bne.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e242      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d106      	bne.n	8003040 <HAL_RCC_OscConfig+0x74>
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6f      	ldr	r2, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b6d      	ldr	r3, [pc, #436]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6c      	ldr	r2, [pc, #432]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003064:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a68      	ldr	r2, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fc30 	bl	80018e8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe fc2c 	bl	80018e8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e207      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0xc0>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fc1c 	bl	80018e8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fc18 	bl	80018e8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1f3      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	4b51      	ldr	r3, [pc, #324]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e2:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d11c      	bne.n	8003134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fa:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d116      	bne.n	8003134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_RCC_OscConfig+0x152>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d001      	beq.n	800311e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1c7      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4937      	ldr	r1, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	e03a      	b.n	80031aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313c:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_RCC_OscConfig+0x244>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fe fbd1 	bl	80018e8 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fbcd 	bl	80018e8 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1a8      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4925      	ldr	r1, [pc, #148]	; (800320c <HAL_RCC_OscConfig+0x240>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317e:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_OscConfig+0x244>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fbb0 	bl	80018e8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318c:	f7fe fbac 	bl	80018e8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e187      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d036      	beq.n	8003224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_RCC_OscConfig+0x248>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fb90 	bl	80018e8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fe fb8c 	bl	80018e8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e167      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x240>)
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x200>
 80031ea:	e01b      	b.n	8003224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_OscConfig+0x248>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fb79 	bl	80018e8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	e00e      	b.n	8003218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fe fb75 	bl	80018e8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d907      	bls.n	8003218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e150      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
 800320c:	40023800 	.word	0x40023800
 8003210:	42470000 	.word	0x42470000
 8003214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x470>)
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ea      	bne.n	80031fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8097 	beq.w	8003360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b81      	ldr	r3, [pc, #516]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b7d      	ldr	r3, [pc, #500]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a7c      	ldr	r2, [pc, #496]	; (800343c <HAL_RCC_OscConfig+0x470>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b7a      	ldr	r3, [pc, #488]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	4b77      	ldr	r3, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x474>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326e:	4b74      	ldr	r3, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x474>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a73      	ldr	r2, [pc, #460]	; (8003440 <HAL_RCC_OscConfig+0x474>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe fb35 	bl	80018e8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fe fb31 	bl	80018e8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e10c      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <HAL_RCC_OscConfig+0x474>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2ea>
 80032a8:	4b64      	ldr	r3, [pc, #400]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a63      	ldr	r2, [pc, #396]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e01c      	b.n	80032f0 <HAL_RCC_OscConfig+0x324>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x30c>
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a5e      	ldr	r2, [pc, #376]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a5b      	ldr	r2, [pc, #364]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0x324>
 80032d8:	4b58      	ldr	r3, [pc, #352]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	4b55      	ldr	r3, [pc, #340]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a54      	ldr	r2, [pc, #336]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe faf6 	bl	80018e8 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe faf2 	bl	80018e8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0cb      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	4b49      	ldr	r3, [pc, #292]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0ee      	beq.n	8003300 <HAL_RCC_OscConfig+0x334>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fe fae0 	bl	80018e8 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fadc 	bl	80018e8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0b5      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ee      	bne.n	800332c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	4a38      	ldr	r2, [pc, #224]	; (800343c <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a1 	beq.w	80034ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_OscConfig+0x470>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b08      	cmp	r3, #8
 8003374:	d05c      	beq.n	8003430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d141      	bne.n	8003402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_OscConfig+0x478>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fab0 	bl	80018e8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe faac 	bl	80018e8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e087      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	491b      	ldr	r1, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x478>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe fa85 	bl	80018e8 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fa81 	bl	80018e8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e05c      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_OscConfig+0x470>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x416>
 8003400:	e054      	b.n	80034ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fa6e 	bl	80018e8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fa6a 	bl	80018e8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e045      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x444>
 800342e:	e03d      	b.n	80034ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e038      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
 800343c:	40023800 	.word	0x40023800
 8003440:	40007000 	.word	0x40007000
 8003444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x4ec>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d028      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d121      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d11a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003480:	4293      	cmp	r3, r2
 8003482:	d111      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0cc      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b68      	ldr	r3, [pc, #416]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d90c      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b8      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a58      	ldr	r2, [pc, #352]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a52      	ldr	r2, [pc, #328]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	494d      	ldr	r1, [pc, #308]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d044      	beq.n	80035dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d003      	beq.n	800357a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e067      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4934      	ldr	r1, [pc, #208]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ac:	f7fe f99c 	bl	80018e8 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe f998 	bl	80018e8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e04f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d20c      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e032      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4916      	ldr	r1, [pc, #88]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f821 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490a      	ldr	r1, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	fa22 f303 	lsr.w	r3, r2, r3
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe f8fc 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023c00 	.word	0x40023c00
 8003678:	40023800 	.word	0x40023800
 800367c:	080053a4 	.word	0x080053a4
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368c:	b094      	sub	sp, #80	; 0x50
 800368e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	2300      	movs	r3, #0
 8003696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003698:	2300      	movs	r3, #0
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a0:	4b79      	ldr	r3, [pc, #484]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x40>
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	f200 80e1 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x34>
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ba:	e0db      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036c0:	e0db      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_GetSysClockFreq+0x208>)
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c6:	e0d8      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	2200      	movs	r2, #0
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
 80036f2:	2300      	movs	r3, #0
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
 80036f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370c:	0150      	lsls	r0, r2, #5
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4621      	mov	r1, r4
 8003714:	1a51      	subs	r1, r2, r1
 8003716:	6139      	str	r1, [r7, #16]
 8003718:	4629      	mov	r1, r5
 800371a:	eb63 0301 	sbc.w	r3, r3, r1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800372c:	4659      	mov	r1, fp
 800372e:	018b      	lsls	r3, r1, #6
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003736:	4651      	mov	r1, sl
 8003738:	018a      	lsls	r2, r1, #6
 800373a:	4651      	mov	r1, sl
 800373c:	ebb2 0801 	subs.w	r8, r2, r1
 8003740:	4659      	mov	r1, fp
 8003742:	eb63 0901 	sbc.w	r9, r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	4623      	mov	r3, r4
 8003760:	eb18 0303 	adds.w	r3, r8, r3
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	462b      	mov	r3, r5
 8003768:	eb49 0303 	adc.w	r3, r9, r3
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800377a:	4629      	mov	r1, r5
 800377c:	024b      	lsls	r3, r1, #9
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003784:	4621      	mov	r1, r4
 8003786:	024a      	lsls	r2, r1, #9
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003798:	f7fc fd28 	bl	80001ec <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	e058      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b38      	ldr	r3, [pc, #224]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	4611      	mov	r1, r2
 80037b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	0159      	lsls	r1, r3, #5
 80037ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d2:	0150      	lsls	r0, r2, #5
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4641      	mov	r1, r8
 80037da:	ebb2 0a01 	subs.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f8:	ebb2 040a 	subs.w	r4, r2, sl
 80037fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	00eb      	lsls	r3, r5, #3
 800380a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380e:	00e2      	lsls	r2, r4, #3
 8003810:	4614      	mov	r4, r2
 8003812:	461d      	mov	r5, r3
 8003814:	4643      	mov	r3, r8
 8003816:	18e3      	adds	r3, r4, r3
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	464b      	mov	r3, r9
 800381c:	eb45 0303 	adc.w	r3, r5, r3
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382e:	4629      	mov	r1, r5
 8003830:	028b      	lsls	r3, r1, #10
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003838:	4621      	mov	r1, r4
 800383a:	028a      	lsls	r2, r1, #10
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	61fa      	str	r2, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	f7fc fcce 	bl	80001ec <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetSysClockFreq+0x200>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003872:	e002      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetSysClockFreq+0x204>)
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800387c:	4618      	mov	r0, r3
 800387e:	3750      	adds	r7, #80	; 0x50
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	080053b4 	.word	0x080053b4

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffdc 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	080053b4 	.word	0x080053b4

080038fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e03f      	b.n	800398e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fde4 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 ff81 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d165      	bne.n	8003a7e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit_DMA+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e05e      	b.n	8003a80 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit_DMA+0x38>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e057      	b.n	8003a80 <HAL_UART_Transmit_DMA+0xe8>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2221      	movs	r2, #33	; 0x21
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_UART_Transmit_DMA+0xf0>)
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_UART_Transmit_DMA+0xf4>)
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_UART_Transmit_DMA+0xf8>)
 8003a0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	2200      	movs	r2, #0
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f7fe f94a 	bl	8001cc8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	617b      	str	r3, [r7, #20]
   return(result);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a66:	627a      	str	r2, [r7, #36]	; 0x24
 8003a68:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6a39      	ldr	r1, [r7, #32]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3730      	adds	r7, #48	; 0x30
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	080040e1 	.word	0x080040e1
 8003a8c:	0800417b 	.word	0x0800417b
 8003a90:	080042f3 	.word	0x080042f3

08003a94 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d152      	bne.n	8003b54 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04b      	b.n	8003b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e044      	b.n	8003b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	461a      	mov	r2, r3
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fc51 	bl	8004388 <UART_Start_Receive_DMA>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d12c      	bne.n	8003b4e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d125      	bne.n	8003b48 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	617b      	str	r3, [r7, #20]
   return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f043 0310 	orr.w	r3, r3, #16
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b32:	627a      	str	r2, [r7, #36]	; 0x24
 8003b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003b46:	e002      	b.n	8003b4e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b52:	e000      	b.n	8003b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b0ba      	sub	sp, #232	; 0xe8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x66>
 8003bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fd87 	bl	80046d2 <UART_Receive_IT>
      return;
 8003bc4:	e256      	b.n	8004074 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80de 	beq.w	8003d8c <HAL_UART_IRQHandler+0x22c>
 8003bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80d1 	beq.w	8003d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_UART_IRQHandler+0xae>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_UART_IRQHandler+0xd2>
 8003c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_UART_IRQHandler+0xf6>
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <HAL_UART_IRQHandler+0x126>
 8003c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0208 	orr.w	r2, r3, #8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 81ed 	beq.w	800406a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_UART_IRQHandler+0x14e>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fd12 	bl	80046d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <HAL_UART_IRQHandler+0x17a>
 8003cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04f      	beq.n	8003d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fc1a 	bl	8004514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d141      	bne.n	8003d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1d9      	bne.n	8003cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d013      	beq.n	8003d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_UART_IRQHandler+0x3dc>)
 8003d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe f882 	bl	8001e58 <HAL_DMA_Abort_IT>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d64:	4610      	mov	r0, r2
 8003d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	e00e      	b.n	8003d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f9ae 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	e00a      	b.n	8003d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9aa 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	e006      	b.n	8003d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9a6 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d86:	e170      	b.n	800406a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	bf00      	nop
    return;
 8003d8a:	e16e      	b.n	800406a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f040 814a 	bne.w	800402a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8143 	beq.w	800402a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 813c 	beq.w	800402a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	f040 80b4 	bne.w	8003f40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8140 	beq.w	800406e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003df6:	429a      	cmp	r2, r3
 8003df8:	f080 8139 	bcs.w	800406e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	f000 8088 	beq.w	8003f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d9      	bne.n	8003e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e1      	bne.n	8003e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e3      	bne.n	8003e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef2:	f023 0310 	bic.w	r3, r3, #16
 8003ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e3      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd ff2b 	bl	8001d78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc fd66 	bl	8000a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f38:	e099      	b.n	800406e <HAL_UART_IRQHandler+0x50e>
 8003f3a:	bf00      	nop
 8003f3c:	080045db 	.word	0x080045db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 808b 	beq.w	8004072 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8086 	beq.w	8004072 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e3      	bne.n	8003f66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3314      	adds	r3, #20
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	623b      	str	r3, [r7, #32]
   return(result);
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e3      	bne.n	8003f9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004008:	61fa      	str	r2, [r7, #28]
 800400a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69b9      	ldr	r1, [r7, #24]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	617b      	str	r3, [r7, #20]
   return(result);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e3      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800401c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fcee 	bl	8000a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004028:	e023      	b.n	8004072 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_UART_IRQHandler+0x4ea>
 8004036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fadd 	bl	8004602 <UART_Transmit_IT>
    return;
 8004048:	e014      	b.n	8004074 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00e      	beq.n	8004074 <HAL_UART_IRQHandler+0x514>
 8004056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fb1d 	bl	80046a2 <UART_EndTransmit_IT>
    return;
 8004068:	e004      	b.n	8004074 <HAL_UART_IRQHandler+0x514>
    return;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <HAL_UART_IRQHandler+0x514>
      return;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_UART_IRQHandler+0x514>
      return;
 8004072:	bf00      	nop
  }
}
 8004074:	37e8      	adds	r7, #232	; 0xe8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop

0800407c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b090      	sub	sp, #64	; 0x40
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d137      	bne.n	800416c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	2200      	movs	r2, #0
 8004100:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	623b      	str	r3, [r7, #32]
   return(result);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
 800411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004122:	633a      	str	r2, [r7, #48]	; 0x30
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	60fb      	str	r3, [r7, #12]
   return(result);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004156:	61fa      	str	r2, [r7, #28]
 8004158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69b9      	ldr	r1, [r7, #24]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	617b      	str	r3, [r7, #20]
   return(result);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800416a:	e002      	b.n	8004172 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800416c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800416e:	f7ff ff85 	bl	800407c <HAL_UART_TxCpltCallback>
}
 8004172:	bf00      	nop
 8004174:	3740      	adds	r7, #64	; 0x40
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff ff81 	bl	8004090 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b09c      	sub	sp, #112	; 0x70
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d172      	bne.n	8004298 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b4:	2200      	movs	r2, #0
 80041b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	667b      	str	r3, [r7, #100]	; 0x64
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800420c:	647a      	str	r2, [r7, #68]	; 0x44
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	623b      	str	r3, [r7, #32]
   return(result);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004236:	663b      	str	r3, [r7, #96]	; 0x60
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004240:	633a      	str	r2, [r7, #48]	; 0x30
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d119      	bne.n	8004298 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60fb      	str	r3, [r7, #12]
   return(result);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004284:	61fa      	str	r2, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	617b      	str	r3, [r7, #20]
   return(result);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042a4:	4619      	mov	r1, r3
 80042a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042a8:	f7fc fbac 	bl	8000a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ac:	e002      	b.n	80042b4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80042ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042b0:	f7ff fef8 	bl	80040a4 <HAL_UART_RxCpltCallback>
}
 80042b4:	bf00      	nop
 80042b6:	3770      	adds	r7, #112	; 0x70
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d108      	bne.n	80042e4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7fc fb91 	bl	8000a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042e2:	e002      	b.n	80042ea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fee7 	bl	80040b8 <HAL_UART_RxHalfCpltCallback>
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b21      	cmp	r3, #33	; 0x21
 8004324:	d108      	bne.n	8004338 <UART_DMAError+0x46>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f000 f8c6 	bl	80044c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b22      	cmp	r3, #34	; 0x22
 8004358:	d108      	bne.n	800436c <UART_DMAError+0x7a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f000 f8d4 	bl	8004514 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0210 	orr.w	r2, r3, #16
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004378:	68b8      	ldr	r0, [r7, #8]
 800437a:	f7ff fea7 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b098      	sub	sp, #96	; 0x60
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2222      	movs	r2, #34	; 0x22
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	4a40      	ldr	r2, [pc, #256]	; (80044b8 <UART_Start_Receive_DMA+0x130>)
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	4a3f      	ldr	r2, [pc, #252]	; (80044bc <UART_Start_Receive_DMA+0x134>)
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	4a3e      	ldr	r2, [pc, #248]	; (80044c0 <UART_Start_Receive_DMA+0x138>)
 80043c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2200      	movs	r2, #0
 80043ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	f7fd fc6e 	bl	8001cc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d019      	beq.n	8004446 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004428:	65bb      	str	r3, [r7, #88]	; 0x58
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004432:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e5      	bne.n	8004412 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	657b      	str	r3, [r7, #84]	; 0x54
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004466:	63ba      	str	r2, [r7, #56]	; 0x38
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800446c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	617b      	str	r3, [r7, #20]
   return(result);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004490:	653b      	str	r3, [r7, #80]	; 0x50
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800449a:	627a      	str	r2, [r7, #36]	; 0x24
 800449c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3760      	adds	r7, #96	; 0x60
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08004197 	.word	0x08004197
 80044bc:	080042bd 	.word	0x080042bd
 80044c0:	080042f3 	.word	0x080042f3

080044c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004508:	bf00      	nop
 800450a:	3724      	adds	r7, #36	; 0x24
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b095      	sub	sp, #84	; 0x54
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800453c:	643a      	str	r2, [r7, #64]	; 0x40
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	2b01      	cmp	r3, #1
 800458a:	d119      	bne.n	80045c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	60bb      	str	r3, [r7, #8]
   return(result);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ac:	61ba      	str	r2, [r7, #24]
 80045ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6979      	ldr	r1, [r7, #20]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045ce:	bf00      	nop
 80045d0:	3754      	adds	r7, #84	; 0x54
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fd69 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b21      	cmp	r3, #33	; 0x21
 8004614:	d13e      	bne.n	8004694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d114      	bne.n	800464a <UART_Transmit_IT+0x48>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d110      	bne.n	800464a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800463c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]
 8004648:	e008      	b.n	800465c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6211      	str	r1, [r2, #32]
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800468e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fcda 	bl	800407c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08c      	sub	sp, #48	; 0x30
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b22      	cmp	r3, #34	; 0x22
 80046e4:	f040 80ab 	bne.w	800483e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d117      	bne.n	8004722 <UART_Receive_IT+0x50>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d113      	bne.n	8004722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	b29a      	uxth	r2, r3
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
 8004720:	e026      	b.n	8004770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d007      	beq.n	8004746 <UART_Receive_IT+0x74>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <UART_Receive_IT+0x82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e008      	b.n	8004766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	b2da      	uxtb	r2, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004780:	2b00      	cmp	r3, #0
 8004782:	d15a      	bne.n	800483a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0220 	bic.w	r2, r2, #32
 8004792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d135      	bne.n	8004830 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	613b      	str	r3, [r7, #16]
   return(result);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	623a      	str	r2, [r7, #32]
 80047ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69f9      	ldr	r1, [r7, #28]
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d10a      	bne.n	8004822 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc f8eb 	bl	8000a04 <HAL_UARTEx_RxEventCallback>
 800482e:	e002      	b.n	8004836 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fc37 	bl	80040a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e002      	b.n	8004840 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484c:	b0c0      	sub	sp, #256	; 0x100
 800484e:	af00      	add	r7, sp, #0
 8004850:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	ea40 0301 	orr.w	r3, r0, r1
 8004870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	431a      	orrs	r2, r3
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048a0:	f021 010c 	bic.w	r1, r1, #12
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ae:	430b      	orrs	r3, r1
 80048b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	6999      	ldr	r1, [r3, #24]
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	ea40 0301 	orr.w	r3, r0, r1
 80048ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b8f      	ldr	r3, [pc, #572]	; (8004b14 <UART_SetConfig+0x2cc>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d005      	beq.n	80048e8 <UART_SetConfig+0xa0>
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <UART_SetConfig+0x2d0>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d104      	bne.n	80048f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e8:	f7fe fff4 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80048ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048f0:	e003      	b.n	80048fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048f2:	f7fe ffdb 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80048f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	f040 810c 	bne.w	8004b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490c:	2200      	movs	r2, #0
 800490e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004912:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	1891      	adds	r1, r2, r2
 8004920:	65b9      	str	r1, [r7, #88]	; 0x58
 8004922:	415b      	adcs	r3, r3
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800492a:	4621      	mov	r1, r4
 800492c:	eb12 0801 	adds.w	r8, r2, r1
 8004930:	4629      	mov	r1, r5
 8004932:	eb43 0901 	adc.w	r9, r3, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494a:	4690      	mov	r8, r2
 800494c:	4699      	mov	r9, r3
 800494e:	4623      	mov	r3, r4
 8004950:	eb18 0303 	adds.w	r3, r8, r3
 8004954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004958:	462b      	mov	r3, r5
 800495a:	eb49 0303 	adc.w	r3, r9, r3
 800495e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800496e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004976:	460b      	mov	r3, r1
 8004978:	18db      	adds	r3, r3, r3
 800497a:	653b      	str	r3, [r7, #80]	; 0x50
 800497c:	4613      	mov	r3, r2
 800497e:	eb42 0303 	adc.w	r3, r2, r3
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
 8004984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800498c:	f7fb fc2e 	bl	80001ec <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004996:	fba3 2302 	umull	r2, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	011c      	lsls	r4, r3, #4
 800499e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049b8:	415b      	adcs	r3, r3
 80049ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049c0:	4641      	mov	r1, r8
 80049c2:	eb12 0a01 	adds.w	sl, r2, r1
 80049c6:	4649      	mov	r1, r9
 80049c8:	eb43 0b01 	adc.w	fp, r3, r1
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e0:	4692      	mov	sl, r2
 80049e2:	469b      	mov	fp, r3
 80049e4:	4643      	mov	r3, r8
 80049e6:	eb1a 0303 	adds.w	r3, sl, r3
 80049ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ee:	464b      	mov	r3, r9
 80049f0:	eb4b 0303 	adc.w	r3, fp, r3
 80049f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	18db      	adds	r3, r3, r3
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	4613      	mov	r3, r2
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a22:	f7fb fbe3 	bl	80001ec <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2264      	movs	r2, #100	; 0x64
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	1acb      	subs	r3, r1, r3
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004a44:	fba3 2302 	umull	r2, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a50:	441c      	add	r4, r3
 8004a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a64:	4642      	mov	r2, r8
 8004a66:	464b      	mov	r3, r9
 8004a68:	1891      	adds	r1, r2, r2
 8004a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a6c:	415b      	adcs	r3, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a74:	4641      	mov	r1, r8
 8004a76:	1851      	adds	r1, r2, r1
 8004a78:	6339      	str	r1, [r7, #48]	; 0x30
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	414b      	adcs	r3, r1
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	00cb      	lsls	r3, r1, #3
 8004a90:	4651      	mov	r1, sl
 8004a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a96:	4651      	mov	r1, sl
 8004a98:	00ca      	lsls	r2, r1, #3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	460a      	mov	r2, r1
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ac8:	460b      	mov	r3, r1
 8004aca:	18db      	adds	r3, r3, r3
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	4613      	mov	r3, r2
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ade:	f7fb fb85 	bl	80001ec <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2164      	movs	r1, #100	; 0x64
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <UART_SetConfig+0x2d4>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0207 	and.w	r2, r3, #7
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4422      	add	r2, r4
 8004b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b10:	e106      	b.n	8004d20 <UART_SetConfig+0x4d8>
 8004b12:	bf00      	nop
 8004b14:	40011000 	.word	0x40011000
 8004b18:	40011400 	.word	0x40011400
 8004b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b32:	4642      	mov	r2, r8
 8004b34:	464b      	mov	r3, r9
 8004b36:	1891      	adds	r1, r2, r2
 8004b38:	6239      	str	r1, [r7, #32]
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b42:	4641      	mov	r1, r8
 8004b44:	1854      	adds	r4, r2, r1
 8004b46:	4649      	mov	r1, r9
 8004b48:	eb43 0501 	adc.w	r5, r3, r1
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	00eb      	lsls	r3, r5, #3
 8004b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b5a:	00e2      	lsls	r2, r4, #3
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	18e3      	adds	r3, r4, r3
 8004b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b68:	464b      	mov	r3, r9
 8004b6a:	eb45 0303 	adc.w	r3, r5, r3
 8004b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b8e:	4629      	mov	r1, r5
 8004b90:	008b      	lsls	r3, r1, #2
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b98:	4621      	mov	r1, r4
 8004b9a:	008a      	lsls	r2, r1, #2
 8004b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ba0:	f7fb fb24 	bl	80001ec <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4b60      	ldr	r3, [pc, #384]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004baa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	011c      	lsls	r4, r3, #4
 8004bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	61b9      	str	r1, [r7, #24]
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	1851      	adds	r1, r2, r1
 8004bd8:	6139      	str	r1, [r7, #16]
 8004bda:	4649      	mov	r1, r9
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bec:	4659      	mov	r1, fp
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4642      	mov	r2, r8
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c08:	464b      	mov	r3, r9
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	008b      	lsls	r3, r1, #2
 8004c30:	4641      	mov	r1, r8
 8004c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c36:	4641      	mov	r1, r8
 8004c38:	008a      	lsls	r2, r1, #2
 8004c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c3e:	f7fb fad5 	bl	80001ec <__aeabi_uldivmod>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2264      	movs	r2, #100	; 0x64
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	3332      	adds	r3, #50	; 0x32
 8004c5c:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	441c      	add	r4, r3
 8004c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c6e:	2200      	movs	r2, #0
 8004c70:	673b      	str	r3, [r7, #112]	; 0x70
 8004c72:	677a      	str	r2, [r7, #116]	; 0x74
 8004c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	1891      	adds	r1, r2, r2
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	415b      	adcs	r3, r3
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c88:	4641      	mov	r1, r8
 8004c8a:	1851      	adds	r1, r2, r1
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	4649      	mov	r1, r9
 8004c90:	414b      	adcs	r3, r1
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	00cb      	lsls	r3, r1, #3
 8004ca4:	4651      	mov	r1, sl
 8004ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004caa:	4651      	mov	r1, sl
 8004cac:	00ca      	lsls	r2, r1, #3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cba:	464b      	mov	r3, r9
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	eb42 0303 	adc.w	r3, r2, r3
 8004cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cce:	667a      	str	r2, [r7, #100]	; 0x64
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cdc:	4649      	mov	r1, r9
 8004cde:	008b      	lsls	r3, r1, #2
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	008a      	lsls	r2, r1, #2
 8004cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cee:	f7fb fa7d 	bl	80001ec <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <UART_SetConfig+0x4e4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4422      	add	r2, r4
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d26:	46bd      	mov	sp, r7
 8004d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2c:	51eb851f 	.word	0x51eb851f

08004d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 001c 	add.w	r0, r7, #28
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d122      	bne.n	8004d8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 faa2 	bl	80052cc <USB_CoreReset>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e01a      	b.n	8004dc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa96 	bl	80052cc <USB_CoreReset>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
 8004db6:	e005      	b.n	8004dc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10b      	bne.n	8004de2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f043 0206 	orr.w	r2, r3, #6
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dee:	b004      	add	sp, #16
 8004df0:	4770      	bx	lr

08004df2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d115      	bne.n	8004e62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f7fc fd5c 	bl	8001900 <HAL_Delay>
      ms++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa2e 	bl	80052b0 <USB_GetMode>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d01e      	beq.n	8004e98 <USB_SetCurrentMode+0x84>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b31      	cmp	r3, #49	; 0x31
 8004e5e:	d9f0      	bls.n	8004e42 <USB_SetCurrentMode+0x2e>
 8004e60:	e01a      	b.n	8004e98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d115      	bne.n	8004e94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fc fd43 	bl	8001900 <HAL_Delay>
      ms++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa15 	bl	80052b0 <USB_GetMode>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <USB_SetCurrentMode+0x84>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b31      	cmp	r3, #49	; 0x31
 8004e90:	d9f0      	bls.n	8004e74 <USB_SetCurrentMode+0x60>
 8004e92:	e001      	b.n	8004e98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e005      	b.n	8004ea4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b32      	cmp	r3, #50	; 0x32
 8004e9c:	d101      	bne.n	8004ea2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eac:	b084      	sub	sp, #16
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e009      	b.n	8004ee0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3340      	adds	r3, #64	; 0x40
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3301      	adds	r3, #1
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b0e      	cmp	r3, #14
 8004ee4:	d9f2      	bls.n	8004ecc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11c      	bne.n	8004f26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38
 8004f24:	e00b      	b.n	8004f3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f50:	4619      	mov	r1, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f58:	461a      	mov	r2, r3
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10c      	bne.n	8004f7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f965 	bl	800523c <USB_SetDevSpeed>
 8004f72:	e008      	b.n	8004f86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f74:	2101      	movs	r1, #1
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f960 	bl	800523c <USB_SetDevSpeed>
 8004f7c:	e003      	b.n	8004f86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f7e:	2103      	movs	r1, #3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f95b 	bl	800523c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f86:	2110      	movs	r1, #16
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8f3 	bl	8005174 <USB_FlushTxFifo>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f91f 	bl	80051dc <USB_FlushRxFifo>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	e043      	b.n	800505a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe8:	d118      	bne.n	800501c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e013      	b.n	800502e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e008      	b.n	800502e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	461a      	mov	r2, r3
 800504e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005052:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3301      	adds	r3, #1
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d3b7      	bcc.n	8004fd2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e043      	b.n	80050f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800507e:	d118      	bne.n	80050b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	461a      	mov	r2, r3
 8005094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e013      	b.n	80050c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e008      	b.n	80050c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3b7      	bcc.n	8005068 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005118:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f043 0210 	orr.w	r2, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <USB_DevInit+0x2c4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f043 0208 	orr.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d107      	bne.n	8005160 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005160:	7dfb      	ldrb	r3, [r7, #23]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr
 8005170:	803c3800 	.word	0x803c3800

08005174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3301      	adds	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <USB_FlushTxFifo+0x64>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e01b      	b.n	80051cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	daf2      	bge.n	8005182 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	019b      	lsls	r3, r3, #6
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <USB_FlushTxFifo+0x64>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e006      	b.n	80051cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d0f0      	beq.n	80051ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	00030d40 	.word	0x00030d40

080051dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a11      	ldr	r2, [pc, #68]	; (8005238 <USB_FlushRxFifo+0x5c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e018      	b.n	800522c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	daf2      	bge.n	80051e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2210      	movs	r2, #16
 800520a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a08      	ldr	r2, [pc, #32]	; (8005238 <USB_FlushRxFifo+0x5c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e006      	b.n	800522c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b10      	cmp	r3, #16
 8005228:	d0f0      	beq.n	800520c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	00030d40 	.word	0x00030d40

0800523c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	68f9      	ldr	r1, [r7, #12]
 8005258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800526e:	b480      	push	{r7}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005288:	f023 0303 	bic.w	r3, r3, #3
 800528c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529c:	f043 0302 	orr.w	r3, r3, #2
 80052a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0301 	and.w	r3, r3, #1
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <USB_CoreReset+0x64>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e01b      	b.n	8005322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	daf2      	bge.n	80052d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a09      	ldr	r2, [pc, #36]	; (8005330 <USB_CoreReset+0x64>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e006      	b.n	8005322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d0f0      	beq.n	8005302 <USB_CoreReset+0x36>

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	00030d40 	.word	0x00030d40

08005334 <memset>:
 8005334:	4402      	add	r2, r0
 8005336:	4603      	mov	r3, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	f803 1b01 	strb.w	r1, [r3], #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4d0d      	ldr	r5, [pc, #52]	; (800537c <__libc_init_array+0x38>)
 8005348:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534a:	1b64      	subs	r4, r4, r5
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	2600      	movs	r6, #0
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	4d0b      	ldr	r5, [pc, #44]	; (8005384 <__libc_init_array+0x40>)
 8005356:	4c0c      	ldr	r4, [pc, #48]	; (8005388 <__libc_init_array+0x44>)
 8005358:	f000 f818 	bl	800538c <_init>
 800535c:	1b64      	subs	r4, r4, r5
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	2600      	movs	r6, #0
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	f855 3b04 	ldr.w	r3, [r5], #4
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	f855 3b04 	ldr.w	r3, [r5], #4
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	080053cc 	.word	0x080053cc
 8005380:	080053cc 	.word	0x080053cc
 8005384:	080053cc 	.word	0x080053cc
 8005388:	080053d0 	.word	0x080053d0

0800538c <_init>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr

08005398 <_fini>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr
